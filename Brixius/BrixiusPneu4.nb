(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    100128,       2045]
NotebookOptionsPosition[     50442,       1132]
NotebookOutlinePosition[     96791,       1987]
CellTagsIndexPosition[     96748,       1984]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SDATA", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"CI", " ", "->", "  ", 
      RowBox[{"1.5", " ", 
       SuperscriptBox["10", "6"]}]}], " ", ",", 
     RowBox[{"(*", "MPa", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[ScriptB]", "->", "0.400"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\[ScriptD]", "->", "0.879"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\[ScriptH]", "->", 
      RowBox[{"0.55", "\[ScriptB]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"v", "->", "2.0"}], " ", 
     RowBox[{"(*", 
      RowBox[{"m", "/", "s"}], "*)"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IF", "->", " ", 
      RowBox[{"6", " ", 
       RowBox[{"3400.0", "/", "2"}]}]}], 
     RowBox[{"(*", "N", "*)"}], ",", "\[IndentingNewLine]", 
     RowBox[{"k", "->", " ", 
      RowBox[{"5.0", " ", 
       SuperscriptBox["10", "6"]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"kpneu", "->", " ", 
      RowBox[{"3.79618", "\[Times]", 
       SuperscriptBox["10", "6"]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]0", "\[Rule]", "0.01414496241232879`"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]1", "\[Rule]", "0.015359872394301097`"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]2", "\[Rule]", "0.028723674616296577`"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]nom", "->", " ", "0.0275"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IC", "->", 
      RowBox[{"1800.0", " ", "9.81"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\[Beta]", "->", "0.65"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Wnom1", " ", "=", "13825.904770980418`"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Wnom2", " ", "=", "13825.904770980418`"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Wnom0", " ", "=", 
   FractionBox[
    RowBox[{"Wnom1", "+", "Wnom2"}], "4"]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"W0", "=", 
   FractionBox[
    RowBox[{"W1", "+", "W2"}], "4"]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Bn0", " ", "=", "  ", 
   RowBox[{
    FractionBox[
     RowBox[{"CI", " ", "\[ScriptB]", " ", "\[ScriptD]"}], "W0"], 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"5", 
       RowBox[{"(", 
        RowBox[{"\[Delta]0", "/", "\[ScriptH]"}], ")"}]}]}], 
     RowBox[{"1", "+", 
      RowBox[{"3", 
       RowBox[{"(", 
        RowBox[{"\[ScriptB]", " ", "/", "\[ScriptD]"}], ")"}]}]}]]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Bn1", " ", "=", "  ", 
   RowBox[{
    FractionBox[
     RowBox[{"CI", " ", "\[ScriptB]", " ", "\[ScriptD]"}], "W1"], 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"5", 
       RowBox[{"(", 
        RowBox[{"\[Delta]1", "/", "\[ScriptH]"}], ")"}]}]}], 
     RowBox[{"1", "+", 
      RowBox[{"3", 
       RowBox[{"(", 
        RowBox[{"\[ScriptB]", " ", "/", "\[ScriptD]"}], ")"}]}]}]]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Bn2", " ", "=", "  ", 
   RowBox[{
    FractionBox[
     RowBox[{"CI", " ", "\[ScriptB]", " ", "\[ScriptD]"}], "W2"], 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"5", 
       RowBox[{"(", 
        RowBox[{"\[Delta]2", "/", "\[ScriptH]"}], ")"}]}]}], 
     RowBox[{"1", "+", 
      RowBox[{"3", 
       RowBox[{"(", 
        RowBox[{"\[ScriptB]", " ", "/", "\[ScriptD]"}], ")"}]}]}]]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GTR0", " ", "=", "  ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GTR1", " ", "=", "  ", 
   RowBox[{
    RowBox[{"0.88", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "0.08"}], " ", "Bn1"}], "]"}]}], ")"}], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "9.5"}], "s1"}], "]"}]}], ")"}]}], "+", "0.032"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GTR2", " ", "=", "  ", 
   RowBox[{
    RowBox[{"0.88", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "0.08"}], " ", "Bn2"}], "]"}]}], ")"}], 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "9.5"}], "s2"}], "]"}]}], ")"}]}], "+", "0.032"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NTR0", "=", 
   RowBox[{"GTR0", "-", "MRR0"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NTR1", "=", 
   RowBox[{"GTR1", "-", "MRR1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NTR2", "=", 
   RowBox[{"GTR2", "-", "MRR2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MRR0", "=", 
   RowBox[{
    FractionBox["0.9", "Bn0"], "+", "0.032"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MRR1", "=", 
   RowBox[{
    FractionBox["0.9", "Bn1"], "+", "0.032", "+", 
    FractionBox[
     RowBox[{"0.5", "s1"}], 
     SqrtBox["Bn1"]]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MRR2", "=", 
    RowBox[{
     FractionBox["0.9", "Bn2"], "+", "0.032", "+", 
     FractionBox[
      RowBox[{"0.5", "s2"}], 
      SqrtBox["Bn2"]]}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GT0", " ", "=", " ", 
   RowBox[{"W0", " ", "GTR0"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GT1", " ", "=", " ", 
   RowBox[{"W1", " ", "GTR1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GT2", " ", "=", " ", 
   RowBox[{"W2", " ", "GTR2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MR0", " ", "=", " ", 
   RowBox[{"W0", " ", "MRR0"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MR1", " ", "=", " ", 
   RowBox[{"W1", " ", "MRR1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MR2", " ", "=", " ", 
   RowBox[{"W2", " ", "MRR2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NT0", " ", "=", " ", 
   RowBox[{"W0", " ", "NTR0"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NT1", " ", "=", " ", 
   RowBox[{"W1", " ", "NTR1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NT2", " ", "=", " ", 
   RowBox[{"W2", " ", "NTR2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"W", "=", 
   RowBox[{"W0", "+", "W1", "+", "W2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TE1", " ", "=", " ", 
   RowBox[{
    FractionBox["NT1", "GT1"], 
    RowBox[{"(", 
     RowBox[{"1", "-", "s1"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TE2", " ", "=", " ", 
   RowBox[{
    FractionBox["NT2", "GT2"], 
    RowBox[{"(", 
     RowBox[{"1", "-", "s2"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TE", " ", "=", " ", 
   FractionBox[
    RowBox[{"NT0", "+", "NT1", "+", "NT2"}], 
    RowBox[{
     FractionBox["GT1", 
      RowBox[{"(", 
       RowBox[{"1", "-", "s1"}], ")"}]], "+", 
     FractionBox["GT2", 
      RowBox[{"(", 
       RowBox[{"1", "-", "s2"}], ")"}]]}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NTR", " ", "=", " ", 
   FractionBox[
    RowBox[{"NT0", "+", "NT1", "+", "NT2"}], "W"]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"H", " ", "=", " ", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"NT0", "+", "NT1", "+", "NT2"}], ")"}], " ", "v"}], 
     RowBox[{"735.5", " ", "TE"}]]}], " ", ";"}], 
  RowBox[{"(*", "cv", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1", " ", "=", " ", 
   RowBox[{"NT1", " ", 
    RowBox[{"v", "/", 
     RowBox[{"(", 
      RowBox[{"TE1", " ", "735.5"}], ")"}]}]}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H2", " ", "=", " ", 
   RowBox[{"NT2", " ", 
    RowBox[{"v", "/", 
     RowBox[{"(", 
      RowBox[{"TE2", " ", "735.5"}], ")"}]}]}]}], " ", 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.871997484013811*^9, 3.871997786607951*^9}, {
   3.871997967654326*^9, 3.8719981951207867`*^9}, {3.8719982343473263`*^9, 
   3.871998324325107*^9}, 3.8719983957138443`*^9, {3.871999569140932*^9, 
   3.871999603832131*^9}, {3.871999663313449*^9, 3.871999675665139*^9}, {
   3.87199970995221*^9, 3.871999729741026*^9}, {3.872001013445772*^9, 
   3.872001014115068*^9}, {3.872001326362481*^9, 3.872001331112392*^9}, {
   3.872001662642335*^9, 3.872001669182876*^9}, {3.873179341055229*^9, 
   3.873179358134284*^9}, {3.873180209224918*^9, 3.8731802113070393`*^9}, {
   3.8732685465221987`*^9, 3.873268553455715*^9}, {3.8732686693158913`*^9, 
   3.8732686865366*^9}, {3.8732687410714006`*^9, 3.873268772394339*^9}, {
   3.873269115578136*^9, 3.873269159452527*^9}, {3.8732695555976*^9, 
   3.8732695704816103`*^9}, 3.873269947481452*^9, {3.8732703652543297`*^9, 
   3.873270367438902*^9}, {3.873270429491374*^9, 3.873270472425353*^9}, {
   3.873270607380966*^9, 3.8732706522950573`*^9}, {3.873271226488508*^9, 
   3.873271257361915*^9}, 3.873271302654709*^9, 3.873271337261848*^9, {
   3.873788122805834*^9, 3.873788128223543*^9}, {3.873788161820763*^9, 
   3.873788163615561*^9}, {3.873788318663781*^9, 3.8737883810635633`*^9}, {
   3.8737884188142014`*^9, 3.8737884261279297`*^9}, {3.8737884658989153`*^9, 
   3.873788546741086*^9}, {3.873788582971772*^9, 3.873788605720715*^9}, {
   3.8737887090670147`*^9, 3.873788712120612*^9}, {3.873788848242569*^9, 
   3.87378885883984*^9}, {3.873789003610147*^9, 3.873789006357264*^9}, 
   3.873789042914138*^9, {3.8737890808543797`*^9, 3.8737891104628963`*^9}, {
   3.873789378673216*^9, 3.87378938089375*^9}, {3.873789421708809*^9, 
   3.873789422132719*^9}, 3.873789554139614*^9, 3.873789778320054*^9, {
   3.873791020816571*^9, 3.873791036971366*^9}, {3.8737910834114847`*^9, 
   3.873791094751073*^9}, {3.873791371141485*^9, 3.873791373725533*^9}, {
   3.873791417494453*^9, 3.873791417962783*^9}, {3.873791573282116*^9, 
   3.8737916496156807`*^9}, {3.87379529621535*^9, 3.8737953204683027`*^9}, {
   3.874132584824868*^9, 3.874132596159956*^9}, {3.874132633828678*^9, 
   3.874132635336102*^9}, {3.874132719687436*^9, 3.8741327306151114`*^9}, {
   3.874132799552752*^9, 3.874132814347694*^9}, 3.874132856745414*^9, {
   3.874132888605412*^9, 3.874132908747182*^9}, {3.874133022426132*^9, 
   3.874133059212819*^9}, {3.874133099381537*^9, 3.87413312511318*^9}, 
   3.8741331614905577`*^9, {3.874491956598507*^9, 3.874491957444044*^9}, {
   3.874491989988571*^9, 3.8744919961885557`*^9}, {3.8744921084699097`*^9, 
   3.8744921465823936`*^9}, {3.874492226172407*^9, 3.8744922319515247`*^9}, {
   3.8745121247428827`*^9, 3.874512139499378*^9}, {3.874512169829749*^9, 
   3.8745121702994423`*^9}, 3.874512314220894*^9, {3.874512380206791*^9, 
   3.874512509300548*^9}, {3.874512573256508*^9, 3.874512742233754*^9}, {
   3.874512778803103*^9, 3.874512839013191*^9}, {3.874515199525478*^9, 
   3.8745152457703533`*^9}, {3.874515383432166*^9, 3.874515419394588*^9}, 
   3.874515524751141*^9, {3.874515583129191*^9, 3.874515701592383*^9}, {
   3.874515816483712*^9, 3.8745158234270973`*^9}, {3.8745162299327593`*^9, 
   3.8745163152026367`*^9}, {3.874516512044202*^9, 3.874516512257309*^9}, {
   3.874516670300469*^9, 3.874516685631052*^9}, {3.874516772004141*^9, 
   3.874516809008337*^9}, 3.874516859668836*^9, 3.874516905820842*^9, {
   3.874516936225925*^9, 3.8745169384564257`*^9}, 3.874517234637388*^9, {
   3.8745172697512493`*^9, 3.874517348104919*^9}, {3.874517407415531*^9, 
   3.874517409770528*^9}, {3.874517444641336*^9, 3.8745174589792633`*^9}, {
   3.874517723482411*^9, 3.8745177251797113`*^9}, {3.874517772823287*^9, 
   3.8745177754433413`*^9}, {3.874517880745455*^9, 3.8745179507460527`*^9}, {
   3.87451800993773*^9, 3.874518029800802*^9}, {3.874518072812276*^9, 
   3.874518121782261*^9}, {3.8745182285503397`*^9, 3.874518228831498*^9}, {
   3.874518951398899*^9, 3.8745191045023813`*^9}, 3.8745193953799553`*^9, {
   3.8745194311326036`*^9, 3.874519449867202*^9}, 3.874519482956356*^9, {
   3.874519525116188*^9, 3.874519588236677*^9}, {3.874519807188733*^9, 
   3.874519896905134*^9}, {3.8745199359895077`*^9, 3.87452007002299*^9}, 
   3.874520306830887*^9, {3.87452034742984*^9, 3.874520520458288*^9}, {
   3.874521089352578*^9, 3.87452116792598*^9}, {3.874521211278308*^9, 
   3.874521227186042*^9}, {3.874521262264015*^9, 3.874521277483704*^9}, 
   3.8745215897583237`*^9, {3.8745216366926003`*^9, 3.874521710397826*^9}, 
   3.874521891289033*^9, {3.874521921859528*^9, 3.874522025402357*^9}, {
   3.8745223791784363`*^9, 3.874522379367071*^9}, {3.874522412703246*^9, 
   3.874522500416*^9}, {3.874522830133093*^9, 3.87452284158083*^9}, {
   3.87452288995788*^9, 3.8745229542027683`*^9}, {3.8745230087988462`*^9, 
   3.874523032931809*^9}, {3.8745230693990107`*^9, 3.8745231027973347`*^9}, {
   3.874523323111555*^9, 3.874523438379154*^9}, {3.87452381612694*^9, 
   3.874523845292224*^9}, {3.874523930037101*^9, 3.874523998610763*^9}},
 CellLabel->
  "In[2408]:=",ExpressionUUID->"76042945-508c-4efb-bdf2-b19f89b6aa48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"si1", " ", "=", 
  RowBox[{"s1", "/.", " ", 
   RowBox[{"FindRoot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[PartialD]", "s1"], 
       RowBox[{"(", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"TE1", "//.", "SDATA"}], "/.", 
          RowBox[{"W1", "->", "Wnom1"}]}], "}"}], ")"}]}], "==", " ", "0"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"s1", ",", "0.04"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.871998884078375*^9, 3.8719988851429043`*^9}, {
   3.8719989198610363`*^9, 3.871998961318215*^9}, 3.871999002108384*^9, {
   3.871999073663093*^9, 3.8719991292804613`*^9}, {3.8731802668945913`*^9, 
   3.873180267331217*^9}, {3.873269593420391*^9, 3.873269597486031*^9}, {
   3.8732709805081387`*^9, 3.873270981905662*^9}, {3.8732712735330267`*^9, 
   3.873271276059766*^9}, {3.8737887331193113`*^9, 3.873788735487743*^9}, 
   3.8737915325677958`*^9, {3.874515269307926*^9, 3.874515312587201*^9}},
 CellLabel->
  "In[2442]:=",ExpressionUUID->"62af85d3-c57f-49b0-8aaf-fb9b5106994b"],

Cell[BoxData["0.09289170709391564`"], "Output",
 CellChangeTimes->{
  3.874515431251066*^9, 3.874515532738759*^9, 3.874515721211953*^9, 
   3.8745163216184597`*^9, 3.874516518614513*^9, 3.874516863708139*^9, 
   3.8745169455374317`*^9, 3.874517245450136*^9, {3.8745172912419777`*^9, 
   3.874517310216921*^9}, 3.874517354116395*^9, 3.874517427889187*^9, 
   3.874517460979711*^9, 3.874517728484446*^9, 3.874517778234652*^9, 
   3.8745178909397583`*^9, 3.8745179212149973`*^9, 3.8745179571920424`*^9, 
   3.874518032242197*^9, 3.874518088634678*^9, {3.874518123639243*^9, 
   3.874518153058977*^9}, 3.8745182336047897`*^9, 3.874518383425275*^9, 
   3.874518954812525*^9, 3.8745190116142063`*^9, 3.8745190617867613`*^9, {
   3.874519108952448*^9, 3.874519125818466*^9}, 3.874519407309375*^9, 
   3.874519452150165*^9, 3.8745195407754507`*^9, 3.8745195912686567`*^9, 
   3.874519840762395*^9, 3.8745198992806377`*^9, 3.874519977589939*^9, 
   3.8745200195041113`*^9, 3.874520072349559*^9, 3.8745203092799892`*^9, 
   3.8745203778122473`*^9, 3.8745204228165903`*^9, 3.874520467563696*^9, 
   3.8745205224840527`*^9, 3.874521193288447*^9, 3.8745212301501427`*^9, 
   3.874521279935068*^9, 3.874521592083508*^9, 3.874521670322461*^9, 
   3.874521712321295*^9, 3.874521893850182*^9, 3.8745219649695807`*^9, 
   3.8745220278910646`*^9, 3.874522382247034*^9, 3.874522451816188*^9, 
   3.874522503872512*^9, 3.874522869890602*^9, 3.8745229077252913`*^9, 
   3.874523035849785*^9, 3.874523104777244*^9, 3.8745233850891953`*^9, 
   3.87452344038267*^9, 3.874523932135562*^9, 3.874524002731769*^9},
 CellLabel->
  "Out[2442]=",ExpressionUUID->"6c5f5217-6058-4d1b-b985-2ddb28db1d99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"si2", " ", "=", 
  RowBox[{"s2", "/.", " ", 
   RowBox[{"FindRoot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[PartialD]", "s2"], 
       RowBox[{"(", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"TE2", "//.", "SDATA"}], "/.", 
          RowBox[{"W2", "->", "Wnom2"}]}], "}"}], ")"}]}], "==", " ", "0"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"s2", ",", "0.04"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8745154442123337`*^9, 3.874515453111828*^9}},
 CellLabel->
  "In[2443]:=",ExpressionUUID->"c4413f65-3e29-4710-930e-2ecd63030f3b"],

Cell[BoxData["0.0855025383327139`"], "Output",
 CellChangeTimes->{
  3.874515455140964*^9, 3.874515545813662*^9, 3.874515723017577*^9, 
   3.874516323164007*^9, 3.874516520139163*^9, 3.8745168654369307`*^9, 
   3.874516947210499*^9, 3.874517245461699*^9, {3.8745172912536917`*^9, 
   3.874517310233121*^9}, 3.8745173541311007`*^9, 3.874517427901698*^9, 
   3.8745174609915667`*^9, 3.8745177284999*^9, 3.874517778248453*^9, 
   3.87451789095057*^9, 3.874517921226879*^9, 3.874517957203003*^9, 
   3.87451803225211*^9, 3.874518088645336*^9, {3.874518123649324*^9, 
   3.874518153079649*^9}, 3.874518233620514*^9, 3.874518383447297*^9, 
   3.874518954825779*^9, 3.874519011624826*^9, 3.8745190617995663`*^9, {
   3.874519108963571*^9, 3.8745191258418818`*^9}, 3.8745194073233767`*^9, 
   3.874519452161069*^9, 3.874519540787122*^9, 3.874519591281827*^9, 
   3.874519840774117*^9, 3.8745198992942047`*^9, 3.874519977602481*^9, 
   3.874520019515829*^9, 3.874520072363011*^9, 3.874520309292452*^9, 
   3.874520377827416*^9, 3.874520422829443*^9, 3.874520467575759*^9, 
   3.87452052249654*^9, 3.8745211933028584`*^9, 3.874521230162109*^9, 
   3.874521279948205*^9, 3.874521592098298*^9, 3.874521670336606*^9, 
   3.874521712334825*^9, 3.874521893863469*^9, 3.8745219649812098`*^9, 
   3.874522027903953*^9, 3.8745223822603283`*^9, 3.8745224518289957`*^9, 
   3.874522503884783*^9, 3.874522869906949*^9, 3.874522907739092*^9, 
   3.8745230358690157`*^9, 3.874523104791802*^9, 3.874523385125806*^9, 
   3.8745234403979683`*^9, 3.874523932151149*^9, 3.874524002747517*^9},
 CellLabel->
  "Out[2443]=",ExpressionUUID->"f14c91fa-2f71-4805-a8a6-017e006d0feb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol1", " ", "=", " ", 
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["\[PartialD]", "s1"], 
        RowBox[{"(", 
         RowBox[{"TE1", "//.", "SDATA"}], ")"}]}], "==", " ", "0"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"NT1", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Beta]"}], ")"}], "IF"}]}], "==", " ", "0"}], 
        ")"}], "//.", "SDATA"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s1", ",", "si1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W1", ",", 
        RowBox[{"Wnom1", "+", "10"}]}], "}"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.873269265685206*^9, 3.873269433292942*^9}, {
   3.873269466624295*^9, 3.8732695078430977`*^9}, 3.873269785367466*^9, {
   3.873269835328515*^9, 3.8732699272704763`*^9}, {3.873270340991493*^9, 
   3.873270348955495*^9}, {3.8732706394691067`*^9, 3.8732706411154127`*^9}, {
   3.87327075358428*^9, 3.873270754081052*^9}, {3.8737887535639677`*^9, 
   3.8737887568097477`*^9}, {3.8737915378282022`*^9, 3.873791551804022*^9}, {
   3.874515741064233*^9, 3.8745157476793747`*^9}, {3.8745157838073053`*^9, 
   3.874515787783606*^9}, 3.874515844322606*^9, 3.874516334958047*^9},
 CellLabel->
  "In[2444]:=",ExpressionUUID->"83e5e4bc-bedc-4930-af18-a1a27efb005a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"s1", "\[Rule]", "0.0789127362831849`"}], ",", 
   RowBox[{"W1", "\[Rule]", "8944.52986131707`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.873791554202198*^9, 3.873791614960137*^9, 3.873791860063588*^9, {
   3.873795282531281*^9, 3.873795325310598*^9}, {3.874132840309916*^9, 
   3.8741328602466803`*^9}, {3.874132891748242*^9, 3.874132910846816*^9}, {
   3.874133039851426*^9, 3.87413306580571*^9}, {3.8741331012451277`*^9, 
   3.874133163698151*^9}, 3.874512331909627*^9, 3.874515796615634*^9, {
   3.8745158297598743`*^9, 3.8745158446046047`*^9}, {3.874516325410866*^9, 
   3.874516335585269*^9}, 3.874516522461979*^9, 3.874516867058278*^9, 
   3.874516949347602*^9, 3.874517245473988*^9, {3.874517291266653*^9, 
   3.874517310249465*^9}, 3.8745173541444473`*^9, 3.8745174279143133`*^9, 
   3.874517461003296*^9, 3.87451772850965*^9, 3.874517778274887*^9, 
   3.874517890960951*^9, 3.874517921238504*^9, 3.8745179572178917`*^9, 
   3.874518032261902*^9, 3.8745180886584597`*^9, {3.874518123659483*^9, 
   3.8745181531009083`*^9}, 3.8745182336344833`*^9, 3.874518383467428*^9, 
   3.874518954838599*^9, 3.8745190116353483`*^9, 3.874519061812518*^9, {
   3.874519108976871*^9, 3.874519125863929*^9}, 3.874519407335967*^9, 
   3.874519452171796*^9, 3.8745195407979097`*^9, 3.874519591295898*^9, 
   3.8745198407858143`*^9, 3.8745198993085127`*^9, 3.874519977615788*^9, 
   3.874520019527692*^9, 3.8745200723767567`*^9, 3.874520309305887*^9, 
   3.8745203778408327`*^9, 3.874520422843708*^9, 3.874520467587908*^9, 
   3.874520522508404*^9, 3.874521193317621*^9, 3.874521230176277*^9, 
   3.8745212799621143`*^9, 3.874521592113368*^9, 3.874521670349545*^9, 
   3.87452171234914*^9, 3.874521893876009*^9, 3.874521964992835*^9, 
   3.874522027915865*^9, 3.874522382275311*^9, 3.8745224518422728`*^9, 
   3.874522503897065*^9, 3.874522869920899*^9, 3.874522907754611*^9, 
   3.874523035886097*^9, 3.874523104806417*^9, 3.87452338517209*^9, 
   3.874523440415097*^9, 3.87452393216719*^9, 3.874524002764119*^9},
 CellLabel->
  "Out[2444]=",ExpressionUUID->"e2b04189-7fc3-46cd-b129-c626d6a5fc16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol2", " ", "=", " ", 
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["\[PartialD]", "s2"], 
        RowBox[{"(", 
         RowBox[{"TE2", "//.", "SDATA"}], ")"}]}], "==", " ", "0"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"NT2", "-", 
          RowBox[{"\[Beta]", " ", "IF"}]}], "==", " ", "0"}], ")"}], "//.", 
       "SDATA"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s2", ",", "si2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W2", ",", 
        RowBox[{"Wnom2", "+", "10"}]}], "}"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874515859721726*^9, 3.874515876784338*^9}, 
   3.8745163409975243`*^9},
 CellLabel->
  "In[2445]:=",ExpressionUUID->"c5b502cc-14de-4af1-a9e9-0a51a7404bdd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"s2", "\[Rule]", "0.09547600186413847`"}], ",", 
   RowBox[{"W2", "\[Rule]", "18012.560191487326`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87451587832815*^9, 3.874516341999929*^9, 3.874516525176051*^9, 
   3.874516868799141*^9, 3.8745169512184343`*^9, 3.874517245486047*^9, {
   3.87451729127886*^9, 3.874517310264761*^9}, 3.874517354156858*^9, 
   3.874517427931349*^9, 3.874517461015203*^9, 3.8745177285192833`*^9, 
   3.874517778289228*^9, 3.8745178909719*^9, 3.874517921250353*^9, 
   3.8745179572279654`*^9, 3.874518032271757*^9, 3.8745180886715393`*^9, {
   3.874518123669649*^9, 3.874518153122452*^9}, 3.874518233651987*^9, 
   3.8745183834867353`*^9, 3.874518954852151*^9, 3.8745190116463327`*^9, 
   3.8745190618255253`*^9, {3.874519108991445*^9, 3.8745191258856792`*^9}, 
   3.874519407347061*^9, 3.874519452182667*^9, 3.8745195408113127`*^9, 
   3.87451959130761*^9, 3.874519840798566*^9, 3.874519899322263*^9, 
   3.874519977630521*^9, 3.8745200195403233`*^9, 3.874520072391295*^9, 
   3.874520309319251*^9, 3.874520377853056*^9, 3.874520422858117*^9, 
   3.874520467599934*^9, 3.874520522520604*^9, 3.874521193330744*^9, 
   3.874521230189569*^9, 3.874521279983736*^9, 3.874521592128571*^9, 
   3.8745216703662443`*^9, 3.874521712362924*^9, 3.874521893888466*^9, 
   3.87452196500569*^9, 3.874522027928362*^9, 3.874522382290916*^9, 
   3.874522451855892*^9, 3.874522503910561*^9, 3.874522869935439*^9, 
   3.874522907768379*^9, 3.8745230359021463`*^9, 3.874523104821745*^9, 
   3.874523385200604*^9, 3.874523440431081*^9, 3.874523932182678*^9, 
   3.874524002786426*^9},
 CellLabel->
  "Out[2445]=",ExpressionUUID->"2694bad4-a816-4f11-b992-e85718a06d0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["\[PartialD]", "s1"], 
        RowBox[{"(", 
         RowBox[{"TE", "//.", "SDATA"}], ")"}]}], "==", " ", "0"}], ",", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[PartialD]", "s2"], 
        RowBox[{"(", 
         RowBox[{"TE", "//.", "SDATA"}], ")"}]}], "==", " ", "0"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"NT1", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Beta]"}], ")"}], 
           RowBox[{"(", 
            RowBox[{"IF", "+", "MR0"}], ")"}]}]}], "==", " ", "0"}], ")"}], "//.",
        "SDATA"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"NT2", "-", 
          RowBox[{"\[Beta]", " ", 
           RowBox[{"(", 
            RowBox[{"IF", "+", "MR0"}], ")"}]}]}], "==", " ", "0"}], ")"}], "//.",
        "SDATA"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s1", ",", "si1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"s2", ",", "si2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W1", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"W1", "/.", "sol1"}], ")"}], "+", "11"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W2", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"W2", "/.", "sol2"}], ")"}], "+", "10"}]}], "}"}]}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.87451635350276*^9, 3.87451635601326*^9}, {
   3.874516421682279*^9, 3.874516461341236*^9}, {3.8745170850766563`*^9, 
   3.874517099572309*^9}, 3.874518142559681*^9},
 CellLabel->
  "In[2446]:=",ExpressionUUID->"0d4f50f0-ca61-4092-bc1c-bedde970114d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"s1", "\[Rule]", "0.10288759493443177`"}], ",", 
   RowBox[{"s2", "\[Rule]", "0.09764168855085704`"}], ",", 
   RowBox[{"W1", "\[Rule]", "7421.4558441347845`"}], ",", 
   RowBox[{"W2", "\[Rule]", "18842.762830766747`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.874516195959638*^9, {3.8745163496314497`*^9, 3.874516361693199*^9}, {
   3.8745164288694887`*^9, 3.8745164620701942`*^9}, 3.874516530391327*^9, 
   3.87451669437689*^9, 3.874516790354353*^9, 3.874516870862103*^9, 
   3.87451695422716*^9, 3.874517100112789*^9, 3.874517245504068*^9, {
   3.874517291295478*^9, 3.8745173102822847`*^9}, 3.8745173541754713`*^9, 
   3.8745174279487257`*^9, 3.874517461030702*^9, 3.8745177285341578`*^9, 
   3.874517778305297*^9, 3.8745178909863358`*^9, 3.874517921265073*^9, 
   3.874517957245072*^9, 3.8745180322851686`*^9, 3.8745180886875143`*^9, {
   3.874518123768901*^9, 3.874518153145027*^9}, 3.874518233672662*^9, 
   3.874518383506588*^9, 3.874518954870144*^9, 3.874519011661233*^9, 
   3.874519061839579*^9, {3.8745191090081367`*^9, 3.874519125906928*^9}, 
   3.874519407364964*^9, 3.8745194521973333`*^9, 3.874519540826796*^9, 
   3.874519591323432*^9, 3.8745198408183107`*^9, 3.874519899341663*^9, 
   3.874519977646371*^9, 3.874520019558442*^9, 3.874520072418665*^9, 
   3.874520309338539*^9, 3.8745203778690367`*^9, 3.8745204228781443`*^9, 
   3.874520467619268*^9, 3.8745205225357857`*^9, 3.8745211933481083`*^9, 
   3.874521230206324*^9, 3.874521280004159*^9, 3.87452159214741*^9, 
   3.87452167038345*^9, 3.87452171238241*^9, 3.8745218939054537`*^9, 
   3.874521965022146*^9, 3.874522027946233*^9, 3.8745223823239822`*^9, 
   3.8745224518737183`*^9, 3.874522503927949*^9, 3.874522869956657*^9, 
   3.874522907791691*^9, 3.874523035925074*^9, 3.874523104841954*^9, 
   3.874523385265996*^9, 3.874523440448579*^9, 3.874523932206112*^9, 
   3.8745240028196993`*^9},
 CellLabel->
  "Out[2446]=",ExpressionUUID->"63b80efc-6971-420c-bf2d-196d7ddaa15a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["\[Pi]", "4"], "  ", 
         RowBox[{"(", 
          RowBox[{"2", 
           SqrtBox[
            RowBox[{"\[Delta]", 
             RowBox[{"(", 
              RowBox[{"\[ScriptD]", "-", "\[Delta]"}], ")"}]}]]}], ")"}], 
         "\[ScriptB]", "  ", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{"kpneu", 
             RowBox[{"(", 
              RowBox[{"kpneu", "+", "k"}], ")"}], " "}], "k"], " ", 
           "\[Delta]"}], ")"}]}], "==", 
        FractionBox[
         RowBox[{"W1", "+", "W2"}], "4"]}], ")"}], "/.", "sol"}], "//.", 
     "SDATA"}], ",", "\[Delta]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8737894006721563`*^9, 3.873789447192675*^9}, 
   3.873790977867241*^9, {3.873791069399967*^9, 3.873791073860732*^9}, {
   3.873791161315461*^9, 3.8737911702967567`*^9}, {3.873791205994063*^9, 
   3.873791208493033*^9}, {3.873791291633954*^9, 3.873791297675185*^9}, {
   3.873791582575132*^9, 3.873791583008521*^9}, {3.87379522793117*^9, 
   3.873795244534329*^9}, {3.8741330839355907`*^9, 3.874133089954342*^9}, {
   3.87451592086873*^9, 3.874515935865501*^9}, {3.87451605811722*^9, 
   3.874516079634794*^9}, 3.874516881517393*^9},
 CellLabel->
  "In[2447]:=",ExpressionUUID->"384be365-9d7b-4119-9de3-bea06cb76de2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.014146695336229167`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.8789963946604735`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.873789436199284*^9, 3.873789448410317*^9}, 
   3.8737895599186697`*^9, 3.873789782733858*^9, 3.8737909818571777`*^9, {
   3.873791024454208*^9, 3.8737910408469763`*^9}, {3.873791074759804*^9, 
   3.873791100121553*^9}, {3.8737911619876633`*^9, 3.873791173789029*^9}, 
   3.8737912980352993`*^9, 3.873791584017592*^9, {3.873791633135891*^9, 
   3.87379163582526*^9}, 3.8737918598048353`*^9, {3.873795282181386*^9, 
   3.873795325117906*^9}, {3.874132840330893*^9, 3.874132860257818*^9}, {
   3.874132891757535*^9, 3.874132910855982*^9}, {3.874133039870096*^9, 
   3.8741331637072773`*^9}, 3.874512331944263*^9, 3.874516080979435*^9, 
   3.8745168823055677`*^9, 3.874516956602406*^9, 3.874517139227332*^9, 
   3.87451724552386*^9, {3.874517291309038*^9, 3.874517310296628*^9}, 
   3.874517354189824*^9, 3.874517427962921*^9, 3.874517461044273*^9, 
   3.874517728563569*^9, 3.874517778322206*^9, 3.874517890998355*^9, 
   3.8745179212775927`*^9, 3.874517957258458*^9, 3.874518032296012*^9, 
   3.8745180886996117`*^9, {3.874518123779337*^9, 3.8745181531665297`*^9}, 
   3.8745182336949368`*^9, 3.874518383525118*^9, 3.874518954885902*^9, 
   3.874519011673416*^9, 3.874519061855576*^9, {3.874519109021023*^9, 
   3.874519125928546*^9}, 3.87451940737901*^9, 3.8745194522095757`*^9, 
   3.874519540842348*^9, 3.8745195913364773`*^9, 3.874519840832519*^9, 
   3.874519899355978*^9, 3.874519977659451*^9, 3.874520019572904*^9, 
   3.874520072434956*^9, 3.874520309352857*^9, 3.874520377883349*^9, 
   3.874520422892261*^9, 3.8745204676336393`*^9, 3.874520522549713*^9, 
   3.874521193362258*^9, 3.8745212302223797`*^9, 3.874521280018815*^9, 
   3.874521592162602*^9, 3.8745216704018793`*^9, 3.8745217123987503`*^9, 
   3.87452189392117*^9, 3.874521965036923*^9, 3.874522027961788*^9, 
   3.874522382371407*^9, 3.8745224518872538`*^9, 3.8745225039421577`*^9, 
   3.8745228699750023`*^9, 3.87452290780761*^9, 3.87452303594281*^9, 
   3.874523104858642*^9, 3.874523385302218*^9, 3.874523440463622*^9, 
   3.8745239322225246`*^9, 3.874524002836587*^9},
 CellLabel->
  "Out[2447]=",ExpressionUUID->"3a27241f-4616-4f0e-9317-873843afb97e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["\[Pi]", "4"], "  ", 
         RowBox[{"(", 
          RowBox[{"2", 
           SqrtBox[
            RowBox[{"\[Delta]", 
             RowBox[{"(", 
              RowBox[{"\[ScriptD]", "-", "\[Delta]"}], ")"}]}]]}], ")"}], 
         "\[ScriptB]", "  ", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{"kpneu", 
             RowBox[{"(", 
              RowBox[{"kpneu", "+", "k"}], ")"}], " "}], "k"], " ", 
           "\[Delta]"}], ")"}]}], "==", "W1"}], ")"}], "/.", "sol"}], "//.", 
     "SDATA"}], ",", "\[Delta]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.87451609748449*^9, 3.8745160979626102`*^9}, 
   3.874516887406539*^9},
 CellLabel->
  "In[2448]:=",ExpressionUUID->"6638b540-43e4-49d6-bccc-0478bf118af1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.015357275896943974`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.8789953940748074`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.874516101967291*^9, 3.874516888010541*^9, 3.874516958646059*^9, 
   3.874517141637663*^9, 3.8745172455392437`*^9, {3.8745172913213377`*^9, 
   3.874517310309585*^9}, 3.874517354202663*^9, 3.8745174279765053`*^9, 
   3.8745174610566053`*^9, 3.874517728586533*^9, 3.874517778337973*^9, 
   3.8745178910101*^9, 3.874517921296455*^9, 3.874517957271525*^9, 
   3.8745180323064623`*^9, 3.874518088712349*^9, {3.874518123790038*^9, 
   3.874518153187984*^9}, 3.8745182337167883`*^9, 3.874518383543865*^9, 
   3.874518954900045*^9, 3.87451901168815*^9, 3.874519061868231*^9, {
   3.8745191090322723`*^9, 3.874519125951219*^9}, 3.874519407390341*^9, 
   3.874519452220785*^9, 3.874519540854492*^9, 3.874519591348341*^9, 
   3.874519840846476*^9, 3.874519899369982*^9, 3.8745199776761103`*^9, 
   3.874520019585679*^9, 3.874520072448709*^9, 3.874520309366678*^9, 
   3.87452037789563*^9, 3.8745204229057617`*^9, 3.874520467646644*^9, 
   3.874520522563656*^9, 3.8745211933866167`*^9, 3.874521230235314*^9, 
   3.8745212800322247`*^9, 3.874521592178244*^9, 3.874521670417635*^9, 
   3.874521712415189*^9, 3.874521893935557*^9, 3.874521965049387*^9, 
   3.874522027974772*^9, 3.874522382448369*^9, 3.874522451901011*^9, 
   3.874522503957829*^9, 3.874522869991878*^9, 3.874522907821979*^9, 
   3.874523035959766*^9, 3.874523104874832*^9, 3.8745233853191557`*^9, 
   3.8745234404792356`*^9, 3.874523932238504*^9, 3.874524002870764*^9},
 CellLabel->
  "Out[2448]=",ExpressionUUID->"42b72baa-7a8f-40ae-a09e-0b0f08137f27"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["\[Pi]", "4"], "  ", 
         RowBox[{"(", 
          RowBox[{"2", 
           SqrtBox[
            RowBox[{"\[Delta]", 
             RowBox[{"(", 
              RowBox[{"\[ScriptD]", "-", "\[Delta]"}], ")"}]}]]}], ")"}], 
         "\[ScriptB]", "  ", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{"kpneu", 
             RowBox[{"(", 
              RowBox[{"kpneu", "+", "k"}], ")"}], " "}], "k"], " ", 
           "\[Delta]"}], ")"}]}], "==", "W2"}], ")"}], "/.", "sol"}], "//.", 
     "SDATA"}], ",", "\[Delta]"}], "]"}]}]], "Input",
 CellChangeTimes->{3.8745161106287746`*^9, 3.874516893668049*^9},
 CellLabel->
  "In[2449]:=",ExpressionUUID->"e770da00-c62b-49c2-a504-f9135e10b109"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.02873053285029206`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Delta]", "\[Rule]", "0.87897030625226`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.874519884001644*^9, 3.874519899383326*^9}, 
   3.874519977687771*^9, 3.874520019598249*^9, 3.874520072463604*^9, 
   3.87452030938032*^9, 3.87452037790774*^9, 3.8745204229209833`*^9, 
   3.874520467658966*^9, 3.874520522576096*^9, 3.8745211933990107`*^9, 
   3.874521230247631*^9, 3.8745212800460043`*^9, 3.874521592194915*^9, 
   3.8745216704334993`*^9, 3.874521712431286*^9, 3.874521893951701*^9, 
   3.8745219650644207`*^9, 3.8745220279901257`*^9, 3.874522382466597*^9, 
   3.8745224519146023`*^9, 3.874522503973481*^9, 3.874522870009858*^9, 
   3.874522907839827*^9, 3.8745230359781427`*^9, 3.8745231049082937`*^9, 
   3.874523385335825*^9, 3.8745234404985857`*^9, 3.874523932254861*^9, 
   3.874524002887711*^9},
 CellLabel->
  "Out[2449]=",ExpressionUUID->"203a52ec-450d-48b6-bf1d-ef99693f839f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TE", "//.", "SDATA"}], "/.", "sol"}]], "Input",
 CellChangeTimes->{{3.8745171640903463`*^9, 3.8745171643222313`*^9}},
 CellLabel->
  "In[2450]:=",ExpressionUUID->"c23a6d63-246d-4ba7-8481-1149baca5a2c"],

Cell[BoxData["0.7243689349660849`"], "Output",
 CellChangeTimes->{
  3.874517164669039*^9, 3.874517245570057*^9, {3.874517291346002*^9, 
   3.8745173103562803`*^9}, 3.8745173542271633`*^9, 3.874517428001924*^9, 
   3.874517461080608*^9, 3.874517728611579*^9, 3.8745177783645973`*^9, 
   3.874517891035095*^9, 3.874517921318502*^9, 3.8745179572932777`*^9, 
   3.874518032326954*^9, 3.87451808873559*^9, {3.8745181238111267`*^9, 
   3.874518153227642*^9}, 3.874518233764288*^9, 3.8745183835805473`*^9, 
   3.874518954929907*^9, 3.874519011715369*^9, 3.8745190618933153`*^9, {
   3.87451910905799*^9, 3.874519125997837*^9}, 3.874519407412956*^9, 
   3.874519452244577*^9, 3.874519540879826*^9, 3.87451959137182*^9, 
   3.874519840873831*^9, 3.874519899397502*^9, 3.874519977701318*^9, 
   3.874520019610228*^9, 3.874520072478031*^9, 3.8745203093931837`*^9, 
   3.874520377919751*^9, 3.874520422935649*^9, 3.874520467670905*^9, 
   3.8745205225944977`*^9, 3.874521193412323*^9, 3.874521230265143*^9, 
   3.8745212800582457`*^9, 3.874521592213303*^9, 3.874521670451786*^9, 
   3.874521712457597*^9, 3.8745218939676123`*^9, 3.874521965078299*^9, 
   3.874522028004919*^9, 3.8745223824812937`*^9, 3.8745224519279747`*^9, 
   3.874522503988295*^9, 3.874522870025734*^9, 3.874522907857916*^9, 
   3.874523035999757*^9, 3.8745231049563923`*^9, 3.8745233853525352`*^9, 
   3.874523440520467*^9, 3.874523932270906*^9, 3.874524002904622*^9},
 CellLabel->
  "Out[2450]=",ExpressionUUID->"1b77aad4-344f-4503-868c-9bd0bcdeccd8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NTR", "//.", "SDATA"}], "/.", "sol"}]], "Input",
 CellChangeTimes->{{3.872001067642919*^9, 3.87200106819732*^9}, 
   3.8732697131903353`*^9, {3.87327006982624*^9, 3.873270070944374*^9}, 
   3.8737882201159477`*^9, {3.873788906795392*^9, 3.873788910585442*^9}, 
   3.873791839084526*^9},
 CellLabel->
  "In[2451]:=",ExpressionUUID->"6a021dad-663b-40ef-a56f-e9a699592576"],

Cell[BoxData["0.31068885395010115`"], "Output",
 CellChangeTimes->{
  3.872001081755908*^9, 3.872001345332259*^9, 3.872001672540573*^9, 
   3.873179364658372*^9, 3.873180215679714*^9, 3.87318063477372*^9, 
   3.873189778588262*^9, 3.8732685078914423`*^9, 3.873269574800757*^9, 
   3.8732697142179728`*^9, {3.873269875583212*^9, 3.87326989526478*^9}, 
   3.8732699511960907`*^9, 3.873270081120735*^9, 3.873270370968473*^9, {
   3.873270463715885*^9, 3.8732704766981783`*^9}, {3.873270626015442*^9, 
   3.873270655833741*^9}, 3.8732707328458652`*^9, {3.873271260952957*^9, 
   3.8732713074006977`*^9}, 3.873271341787772*^9, 3.873788134882092*^9, 
   3.8737881666443577`*^9, 3.873788220607358*^9, 3.873788669668515*^9, 
   3.873788715590517*^9, 3.873788911263625*^9, 3.8737890115877867`*^9, 
   3.873789045680511*^9, {3.873789086334696*^9, 3.873789113522797*^9}, 
   3.873789198218483*^9, 3.873791100406057*^9, {3.87379183965624*^9, 
   3.873791860155424*^9}, {3.873795282696813*^9, 3.873795325383936*^9}, {
   3.874132840500779*^9, 3.874132860338058*^9}, {3.874132891792561*^9, 
   3.874132910890903*^9}, {3.87413303992798*^9, 3.874133065848477*^9}, {
   3.874133101288488*^9, 3.874133163742218*^9}, 3.874512331989748*^9, 
   3.874516972573927*^9, 3.874517147885376*^9, 3.874517245585309*^9, {
   3.874517291360052*^9, 3.874517310402639*^9}, 3.8745173542395153`*^9, 
   3.874517428014358*^9, 3.874517461092188*^9, 3.874517728632411*^9, 
   3.874517778384261*^9, 3.874517891046349*^9, 3.8745179213294888`*^9, 
   3.874517957306738*^9, 3.8745180323365383`*^9, 3.874518088748657*^9, {
   3.874518123820862*^9, 3.874518153247135*^9}, 3.874518233784391*^9, 
   3.874518383599505*^9, 3.874518954941284*^9, 3.874519011729012*^9, 
   3.874519061908989*^9, {3.874519109068763*^9, 3.8745191260206003`*^9}, 
   3.8745194074204693`*^9, 3.874519452255969*^9, 3.8745195408961487`*^9, 
   3.8745195913826942`*^9, 3.874519840885839*^9, 3.874519899409281*^9, 
   3.8745199777134027`*^9, 3.874520019622415*^9, 3.874520072494155*^9, 
   3.874520309405525*^9, 3.87452037793219*^9, 3.874520422960832*^9, 
   3.8745204676830397`*^9, 3.87452052260962*^9, 3.8745211934216843`*^9, 
   3.874521230280705*^9, 3.874521280070554*^9, 3.874521592232592*^9, 
   3.874521670470004*^9, 3.874521712501237*^9, 3.8745218939835863`*^9, 
   3.874521965107541*^9, 3.874522028017914*^9, 3.8745223824951773`*^9, 
   3.87452245194173*^9, 3.874522504003828*^9, 3.874522870041113*^9, 
   3.874522907876206*^9, 3.8745230360188017`*^9, 3.874523104973641*^9, 
   3.874523385369197*^9, 3.874523440553618*^9, 3.87452393228679*^9, 
   3.87452400292143*^9},
 CellLabel->
  "Out[2451]=",ExpressionUUID->"1a7803b7-b10f-412f-88ca-16b51b765e08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"2", "H"}], "/.", "sol"}], "//.", "SDATA"}]], "Input",
 CellLabel->
  "In[2452]:=",ExpressionUUID->"4e4b19be-52b1-4565-80ad-868b09fbfb40"],

Cell[BoxData["76.58040679455519`"], "Output",
 CellChangeTimes->{
  3.874518198240341*^9, 3.874518233803191*^9, 3.874518383619547*^9, 
   3.874518954953896*^9, 3.8745190117426662`*^9, 3.874519061924202*^9, {
   3.8745191090795727`*^9, 3.874519126042016*^9}, 3.8745194074314947`*^9, 
   3.874519452266931*^9, 3.8745195409075537`*^9, 3.87451959139426*^9, 
   3.874519840899102*^9, 3.874519899422703*^9, 3.874519977728099*^9, 
   3.874520019634494*^9, 3.874520072511627*^9, 3.8745203094174128`*^9, 
   3.874520377944145*^9, 3.874520423011528*^9, 3.8745204676950283`*^9, 
   3.874520522624278*^9, 3.8745211934349003`*^9, 3.874521230295738*^9, 
   3.874521280084249*^9, 3.8745215922503347`*^9, 3.874521670488068*^9, 
   3.874521712574637*^9, 3.874521893998768*^9, 3.8745219651826878`*^9, 
   3.87452202803295*^9, 3.874522382509672*^9, 3.874522451954527*^9, 
   3.87452250401792*^9, 3.874522870056919*^9, 3.874522907891478*^9, 
   3.874523036038563*^9, 3.8745231049994183`*^9, 3.874523385384655*^9, 
   3.874523440573206*^9, 3.874523932302376*^9, 3.874524002938059*^9},
 CellLabel->
  "Out[2452]=",ExpressionUUID->"4b248690-a63a-487a-a335-91356eda8b22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"H2", "/", 
    RowBox[{"(", 
     RowBox[{"H1", "+", "H2"}], ")"}]}], "/.", "sol"}], "//.", 
  "SDATA"}]], "Input",
 CellLabel->
  "In[2453]:=",ExpressionUUID->"b70fa764-203e-4301-b553-9cbf3ed981a4"],

Cell[BoxData["0.6713333649809177`"], "Output",
 CellChangeTimes->{{3.874518208554984*^9, 3.8745182338278313`*^9}, 
   3.874518383640251*^9, 3.874518954966926*^9, 3.874519011756448*^9, 
   3.8745190619352303`*^9, {3.8745191090903482`*^9, 3.874519126063067*^9}, 
   3.8745194074441547`*^9, 3.874519452279373*^9, 3.874519540919284*^9, 
   3.874519591406973*^9, 3.8745198409129877`*^9, 3.874519899439732*^9, 
   3.874519977741352*^9, 3.874520019647524*^9, 3.8745200725261*^9, 
   3.8745203094261703`*^9, 3.874520377956263*^9, 3.874520423026268*^9, 
   3.8745204677072077`*^9, 3.874520522636856*^9, 3.874521193448875*^9, 
   3.874521230308921*^9, 3.874521280097971*^9, 3.874521592278741*^9, 
   3.8745216705061607`*^9, 3.874521712590475*^9, 3.8745218940143833`*^9, 
   3.8745219652007933`*^9, 3.874522028058898*^9, 3.874522382525467*^9, 
   3.8745224519686213`*^9, 3.8745225040324383`*^9, 3.8745228700729923`*^9, 
   3.874522907906283*^9, 3.874523036069384*^9, 3.874523105017729*^9, 
   3.8745233854003143`*^9, 3.874523440591415*^9, 3.874523932317974*^9, 
   3.874524002955131*^9},
 CellLabel->
  "Out[2453]=",ExpressionUUID->"4f217b81-1d43-42ed-ae4f-9c7d77fc5536"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox["W2", "W"], "/.", "sol"}]], "Input",
 CellChangeTimes->{{3.874518270565357*^9, 3.874518282560014*^9}},
 CellLabel->
  "In[2454]:=",ExpressionUUID->"ff9c1708-bc4b-47ef-903a-dfb3498ccdf3"],

Cell[BoxData["0.5739447440337729`"], "Output",
 CellChangeTimes->{{3.874518271302822*^9, 3.874518283010675*^9}, 
   3.874518383661147*^9, 3.874518954978717*^9, 3.87451901177034*^9, 
   3.874519061948462*^9, {3.874519109101766*^9, 3.874519126090066*^9}, 
   3.8745194074577227`*^9, 3.874519452290517*^9, 3.8745195409308977`*^9, 
   3.8745195914189653`*^9, 3.874519840942308*^9, 3.874519899455844*^9, 
   3.874519977754099*^9, 3.8745200196595163`*^9, 3.874520072545251*^9, 
   3.874520309438735*^9, 3.874520377970501*^9, 3.874520423039564*^9, 
   3.874520467719387*^9, 3.87452052264918*^9, 3.874521193464285*^9, 
   3.87452123032226*^9, 3.874521280111157*^9, 3.8745215923393373`*^9, 
   3.874521670523818*^9, 3.874521712606338*^9, 3.874521894029768*^9, 
   3.874521965215025*^9, 3.874522028117153*^9, 3.874522382540339*^9, 
   3.87452245198587*^9, 3.8745225040479937`*^9, 3.874522870088785*^9, 
   3.8745229079205313`*^9, 3.874523036106517*^9, 3.874523105035221*^9, 
   3.874523385415818*^9, 3.8745234406088037`*^9, 3.874523932335157*^9, 
   3.874524002972663*^9},
 CellLabel->
  "Out[2454]=",ExpressionUUID->"807ee6f7-03f0-42bf-8321-711cb2e919ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", 
   RowBox[{"W", "/", "9.81"}]}], " ", "/.", "sol"}]], "Input",
 CellChangeTimes->{{3.874518343294764*^9, 3.874518352078722*^9}},
 CellLabel->
  "In[2455]:=",ExpressionUUID->"84943fc5-85ce-443e-902a-67dc83dbb8ea"],

Cell[BoxData["6693.225962003447`"], "Output",
 CellChangeTimes->{{3.874518343730966*^9, 3.874518383681266*^9}, 
   3.874518954991005*^9, 3.874519011783519*^9, 3.874519061961521*^9, {
   3.874519109112793*^9, 3.874519126110588*^9}, 3.874519407469215*^9, 
   3.8745194523012047`*^9, 3.8745195409427013`*^9, 3.874519591427194*^9, 
   3.87451984095615*^9, 3.87451989947183*^9, 3.874519977777521*^9, 
   3.874520019672114*^9, 3.874520072574442*^9, 3.874520309450944*^9, 
   3.874520377983301*^9, 3.8745204230542917`*^9, 3.874520467732126*^9, 
   3.874520522661416*^9, 3.8745211934787073`*^9, 3.8745212303348083`*^9, 
   3.874521280123836*^9, 3.8745215923574266`*^9, 3.874521670552449*^9, 
   3.874521712622106*^9, 3.874521894045792*^9, 3.874521965231071*^9, 
   3.8745220281319304`*^9, 3.8745223825554667`*^9, 3.8745224520001993`*^9, 
   3.874522504074605*^9, 3.8745228701059103`*^9, 3.874522907936914*^9, 
   3.874523036185381*^9, 3.874523105064739*^9, 3.874523385427565*^9, 
   3.874523440629314*^9, 3.87452393235121*^9, 3.874524002989901*^9},
 CellLabel->
  "Out[2455]=",ExpressionUUID->"a99c4f4e-76a7-4f07-8884-eb82d6c08298"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         FractionBox["\[Pi]", "4"], "  ", 
         RowBox[{"(", 
          RowBox[{"2", 
           SqrtBox[
            RowBox[{"\[Delta]nom", 
             RowBox[{"(", 
              RowBox[{"\[ScriptD]", "-", "\[Delta]nom"}], ")"}]}]]}], ")"}], 
         "\[ScriptB]", "  ", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{"kpneu2", 
             RowBox[{"(", 
              RowBox[{"kpneu2", "+", "k"}], ")"}], " "}], "k"], " ", 
           "\[Delta]nom"}], ")"}]}], "-", "IC"}], "==", "0"}], ")"}], "//.", 
     "SDATA"}], ",", "kpneu2"}], "]"}]}]], "Input",
 CellLabel->
  "In[2456]:=",ExpressionUUID->"0c2c53f8-2fdd-4c64-858b-d1d6793a147e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"kpneu2", "\[Rule]", 
     RowBox[{"-", "8.79617619507796`*^6"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"kpneu2", "\[Rule]", "3.796176195077959`*^6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8745175612542477`*^9, 3.874517728742216*^9, 3.8745177784591913`*^9, 
   3.874517891075488*^9, 3.87451792135493*^9, 3.874517957334875*^9, 
   3.874518032360263*^9, 3.874518088775299*^9, {3.874518123845625*^9, 
   3.8745181532892942`*^9}, 3.874518233891778*^9, 3.874518383710877*^9, 
   3.874518955010358*^9, 3.874519011802556*^9, 3.8745190619989643`*^9, {
   3.874519109129113*^9, 3.874519126137553*^9}, 3.874519407485139*^9, 
   3.874519452317477*^9, 3.874519540958235*^9, 3.8745195914435368`*^9, 
   3.8745198409736843`*^9, 3.874519899493896*^9, 3.874519977862294*^9, 
   3.874520019689446*^9, 3.874520072658683*^9, 3.874520309468733*^9, 
   3.874520378001884*^9, 3.874520423073234*^9, 3.874520467752611*^9, 
   3.8745205226784153`*^9, 3.8745211935022783`*^9, 3.8745212303537807`*^9, 
   3.8745212801406803`*^9, 3.87452159237904*^9, 3.874521670642539*^9, 
   3.8745217126429367`*^9, 3.874521894066967*^9, 3.874521965251814*^9, 
   3.87452202815226*^9, 3.8745223825832043`*^9, 3.8745224520209103`*^9, 
   3.874522504138276*^9, 3.8745228701254683`*^9, 3.874522907952198*^9, 
   3.8745230362042913`*^9, 3.874523105106146*^9, 3.874523385453827*^9, 
   3.874523440648447*^9, 3.8745239323682737`*^9, 3.874524003007265*^9},
 CellLabel->
  "Out[2456]=",ExpressionUUID->"63a933c0-bde2-4835-9123-4524550b47d3"]
}, Open  ]]
},
WindowSize->{1024.5, 558.},
WindowMargins->{{0, Automatic}, {0, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.1 Inherited,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"8695450d-b546-49f0-981b-39cb856e88ed"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 13003, 307, 1739, "Input",ExpressionUUID->"76042945-508c-4efb-bdf2-b19f89b6aa48"],
Cell[CellGroupData[{
Cell[13586, 331, 1068, 24, 73, "Input",ExpressionUUID->"62af85d3-c57f-49b0-8aaf-fb9b5106994b"],
Cell[14657, 357, 1669, 24, 52, "Output",ExpressionUUID->"6c5f5217-6058-4d1b-b985-2ddb28db1d99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16363, 386, 618, 18, 73, "Input",ExpressionUUID->"c4413f65-3e29-4710-930e-2ecd63030f3b"],
Cell[16984, 406, 1648, 24, 52, "Output",ExpressionUUID->"f14c91fa-2f71-4805-a8a6-017e006d0feb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18669, 435, 1443, 35, 73, "Input",ExpressionUUID->"83e5e4bc-bedc-4930-af18-a1a27efb005a"],
Cell[20115, 472, 2143, 33, 52, "Output",ExpressionUUID->"e2b04189-7fc3-46cd-b129-c626d6a5fc16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22295, 510, 885, 27, 73, "Input",ExpressionUUID->"c5b502cc-14de-4af1-a9e9-0a51a7404bdd"],
Cell[23183, 539, 1725, 28, 52, "Output",ExpressionUUID->"2694bad4-a816-4f11-b992-e85718a06d0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24945, 572, 1814, 55, 105, "Input",ExpressionUUID->"0d4f50f0-ca61-4092-bc1c-bedde970114d"],
Cell[26762, 629, 2007, 32, 52, "Output",ExpressionUUID->"63b80efc-6971-420c-bf2d-196d7ddaa15a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28806, 666, 1453, 36, 96, "Input",ExpressionUUID->"384be365-9d7b-4119-9de3-bea06cb76de2"],
Cell[30262, 704, 2386, 38, 52, "Output",ExpressionUUID->"3a27241f-4616-4f0e-9317-873843afb97e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32685, 747, 933, 28, 96, "Input",ExpressionUUID->"6638b540-43e4-49d6-bccc-0478bf118af1"],
Cell[33621, 777, 1769, 30, 52, "Output",ExpressionUUID->"42b72baa-7a8f-40ae-a09e-0b0f08137f27"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35427, 812, 906, 27, 96, "Input",ExpressionUUID->"e770da00-c62b-49c2-a504-f9135e10b109"],
Cell[36336, 841, 1059, 20, 100, "Output",ExpressionUUID->"203a52ec-450d-48b6-bf1d-ef99693f839f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37432, 866, 236, 5, 48, "Input",ExpressionUUID->"c23a6d63-246d-4ba7-8481-1149baca5a2c"],
Cell[37671, 873, 1512, 22, 52, "Output",ExpressionUUID->"1b77aad4-344f-4503-868c-9bd0bcdeccd8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39220, 900, 405, 8, 48, "Input",ExpressionUUID->"6a021dad-663b-40ef-a56f-e9a699592576"],
Cell[39628, 910, 2687, 39, 52, "Output",ExpressionUUID->"1a7803b7-b10f-412f-88ca-16b51b765e08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42352, 954, 184, 5, 51, "Input",ExpressionUUID->"4e4b19be-52b1-4565-80ad-868b09fbfb40"],
Cell[42539, 961, 1147, 17, 52, "Output",ExpressionUUID->"4b248690-a63a-487a-a335-91356eda8b22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43723, 983, 246, 8, 48, "Input",ExpressionUUID->"b70fa764-203e-4301-b553-9cbf3ed981a4"],
Cell[43972, 993, 1160, 17, 52, "Output",ExpressionUUID->"4f217b81-1d43-42ed-ae4f-9c7d77fc5536"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45169, 1015, 224, 5, 64, "Input",ExpressionUUID->"ff9c1708-bc4b-47ef-903a-dfb3498ccdf3"],
Cell[45396, 1022, 1146, 17, 52, "Output",ExpressionUUID->"807ee6f7-03f0-42bf-8321-711cb2e919ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46579, 1044, 252, 6, 51, "Input",ExpressionUUID->"84943fc5-85ce-443e-902a-67dc83dbb8ea"],
Cell[46834, 1052, 1124, 16, 74, "Output",ExpressionUUID->"a99c4f4e-76a7-4f07-8884-eb82d6c08298"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47995, 1073, 846, 26, 96, "Input",ExpressionUUID->"0c2c53f8-2fdd-4c64-858b-d1d6793a147e"],
Cell[48844, 1101, 1582, 28, 54, "Output",ExpressionUUID->"63a933c0-bde2-4835-9123-4524550b47d3"]
}, Open  ]]
}
]
*)

