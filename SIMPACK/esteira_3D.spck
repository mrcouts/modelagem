!file.version=3.7! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20220002
version.desc   = ''
version.build  = 122

!**********************************************************************
!  Global parameters
!**********************************************************************
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 1                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 5.33191778812579287E-01 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -5.60006300001987256E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 1.02194690654869191E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = -6.83838963508605957E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 9.46123972535133362E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 8.82847607135772705E-02 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -7.18065857887268066E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 8.71901893615722656E+00 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 10 s }                ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force output values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_TW                          ) = '0.250'                 ! Definition
subvar.dflt (                       $_TW                          ) = ''                      ! Default value

subvar.str (                        $_TL                          ) = '1.0'                   ! Definition
subvar.dflt (                       $_TL                          ) = ''                      ! Default value

subvar.str (                        $_d1                          ) = '0.5'                   ! Definition
subvar.dflt (                       $_d1                          ) = ''                      ! Default value

subvar.str (                        $_r1                          ) = '$_d1/2'                ! Definition
subvar.dflt (                       $_r1                          ) = ''                      ! Default value

subvar.str (                        $_d2                          ) = '0.250'                 ! Definition
subvar.dflt (                       $_d2                          ) = ''                      ! Default value

subvar.str (                        $_r2                          ) = '$_d2/2'                ! Definition
subvar.dflt (                       $_r2                          ) = ''                      ! Default value

subvar.str (                        $_d                           ) = '0.130'                 ! Definition
subvar.dflt (                       $_d                           ) = ''                      ! Default value

subvar.str (                        $_CI                          ) = '1.8*10^6'              ! Definition
subvar.dflt (                       $_CI                          ) = ''                      ! Default value

subvar.str (                        $_ksolo                       ) = '5*10^6'                ! Definition
subvar.dflt (                       $_ksolo                       ) = ''                      ! Default value

subvar.str (                        $_A                           ) = '$_TL*$_TW'             ! Definition
subvar.dflt (                       $_A                           ) = ''                      ! Default value

subvar.str (                        $_csolo                       ) = '10^6'                  ! Definition
subvar.dflt (                       $_csolo                       ) = ''                      ! Default value

subvar.str (                        $_vmin                        ) = '10^(-8)'               ! Definition
subvar.dflt (                       $_vmin                        ) = ''                      ! Default value

subvar.str (                        $_3g23                        ) = 'sqrt(3/5)'             ! Definition
subvar.dflt (                       $_3g23                        ) = ''                      ! Default value

subvar.str (                        $_5g23                        ) = '(1/3)*sqrt(5-2*sqrt(10/7))' ! Definition
subvar.dflt (                       $_5g23                        ) = ''                      ! Default value

subvar.str (                        $_5g45                        ) = '(1/3)*sqrt(5+2*sqrt(10/7))' ! Definition
subvar.dflt (                       $_5g45                        ) = ''                      ! Default value

subvar.str (                        $_rarb                        ) = '0.1'                   ! Definition
subvar.dflt (                       $_rarb                        ) = ''                      ! Default value

subvar.str (                        $_3gW1                        ) = '8/9'                   ! Definition
subvar.dflt (                       $_3gW1                        ) = ''                      ! Default value

subvar.str (                        $_3gW23                       ) = '5/9'                   ! Definition
subvar.dflt (                       $_3gW23                       ) = ''                      ! Default value

subvar.str (                        $_5gW1                        ) = '128/225'               ! Definition
subvar.dflt (                       $_5gW1                        ) = ''                      ! Default value

subvar.str (                        $_5gW23                       ) = '(322+13*sqrt(70))/900' ! Definition
subvar.dflt (                       $_5gW23                       ) = ''                      ! Default value

subvar.str (                        $_5gW45                       ) = '(322-13*sqrt(70))/900' ! Definition
subvar.dflt (                       $_5gW45                       ) = ''                      ! Default value

subvar.str (                        $_m                           ) = '250+2*380.949+60.952'  ! Definition
subvar.dflt (                       $_m                           ) = ''                      ! Default value

subvar.str (                        $_alpha                       ) = '2'                     ! Definition
subvar.dflt (                       $_alpha                       ) = ''                      ! Default value

subvar.str (                        $_esp                         ) = '0.025'                 ! Definition
subvar.dflt (                       $_esp                         ) = ''                      ! Default value

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -1.60000000000000000E+02
refsys.attr.2d.pos.y (              $R_Isys                       ) = -6.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.70000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 6.30000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_Base                       ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Base                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.cg.pos (             1 ,       $B_Base                       ) = 0.00000000000000000E+00 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Base                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Base                       ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Base                       ) = -4.00000000000000000E+01
body.attr.2d.pos.y (                $B_Base                       ) = 2.80000000000000000E+02
body.attr.2d.width (                $B_Base                       ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Base                       ) = 4.00000000000000000E+01

marker.type (                       $M_Base_BRF                   ) = 1                       ! Type
marker.parent (                     $M_Base_BRF                   ) = $B_Base                 ! Body
marker.flx.type (                   $M_Base_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_Base_Roda1c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda1c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda1c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda1c                ) = { $_TL/2 }              ! Position

marker.type (                       $M_Base_Roda2c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda2c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda2c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda2c                ) = $_d                     ! Position
marker.pos (              2 ,       $M_Base_Roda2c                ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Base_Roda2c                ) = { $_r2-$_r1 }           ! Position

marker.type (                       $M_Base_Roda3c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda3c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda3c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda3c                ) = { -$_d }                ! Position
marker.pos (              2 ,       $M_Base_Roda3c                ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Base_Roda3c                ) = { $_r2-$_r1 }           ! Position

marker.type (                       $M_Base_Roda4c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda4c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda4c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda4c                ) = { -$_TL/2 }             ! Position

marker.type (                       $M_Base_contact11             ) = -87                     ! Type
marker.parent (                     $M_Base_contact11             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact11             ) = -6.38958374357741169E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact11             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact11             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact11             ) = $P_C11                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact11             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact11             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact11             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact12             ) = -87                     ! Type
marker.parent (                     $M_Base_contact12             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact12             ) = 1.65497786633533990E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact12             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact12             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact12             ) = $P_C12                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact12             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact12             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact12             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact13             ) = -87                     ! Type
marker.parent (                     $M_Base_contact13             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact13             ) = 3.41062635919017711E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact13             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact13             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact13             ) = $P_C13                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact13             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact13             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact13             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact21             ) = -87                     ! Type
marker.parent (                     $M_Base_contact21             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact21             ) = -4.83067079165599804E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact21             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact21             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact21             ) = $P_C21                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact21             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact21             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact21             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact22             ) = -87                     ! Type
marker.parent (                     $M_Base_contact22             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact22             ) = -2.69360616269584078E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact22             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact22             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact22             ) = $P_C22                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact22             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact22             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact22             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact23             ) = -87                     ! Type
marker.parent (                     $M_Base_contact23             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact23             ) = 8.31492071466123360E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact23             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact23             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact23             ) = $P_C23                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact23             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact23             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact23             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact31             ) = -87                     ! Type
marker.parent (                     $M_Base_contact31             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact31             ) = 5.21447822337157029E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact31             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact31             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact31             ) = $P_C31                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact31             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact31             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact31             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact32             ) = -87                     ! Type
marker.parent (                     $M_Base_contact32             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact32             ) = 1.57263380432265475E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact32             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact32             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact32             ) = $P_C32                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact32             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact32             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact32             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact33             ) = -87                     ! Type
marker.parent (                     $M_Base_contact33             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact33             ) = 4.40585091588424127E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact33             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact33             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact33             ) = $P_C33                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact33             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact33             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact33             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact41             ) = -87                     ! Type
marker.parent (                     $M_Base_contact41             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact41             ) = -3.80792316646261596E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact41             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact41             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact41             ) = $P_C41                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact41             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact41             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact41             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact42             ) = -87                     ! Type
marker.parent (                     $M_Base_contact42             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact42             ) = 5.08882759266689969E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact42             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact42             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact42             ) = $P_C42                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact42             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact42             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact42             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact43             ) = -87                     ! Type
marker.parent (                     $M_Base_contact43             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact43             ) = -9.58946764521538721E-10 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact43             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact43             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact43             ) = $P_C43                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact43             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact43             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact43             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact51             ) = -87                     ! Type
marker.parent (                     $M_Base_contact51             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact51             ) = -5.62524828789047584E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact51             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact51             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact51             ) = $P_C51                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact51             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact51             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact51             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact52             ) = -87                     ! Type
marker.parent (                     $M_Base_contact52             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact52             ) = 5.80011007900195333E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact52             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact52             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact52             ) = $P_C52                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact52             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact52             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact52             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact53             ) = -87                     ! Type
marker.parent (                     $M_Base_contact53             ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact53             ) = -5.05687955421822312E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact53             ) = 1.67079632679489665E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact53             ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact53             ) = $P_C53                  ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact53             ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact53             ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact53             ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact11_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact11_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact11_            ) = $B_Base                 ! Body
marker.pos (              3 ,       $M_Base_contact11_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact12_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact12_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact12_            ) = $B_Base                 ! Body
marker.pos (              2 ,       $M_Base_contact12_            ) = { -$_3g23*$_TW/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact12_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact13_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact13_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact13_            ) = $B_Base                 ! Body
marker.pos (              2 ,       $M_Base_contact13_            ) = { $_3g23*$_TW/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact13_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact21_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact21_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact21_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact21_            ) = { -$_5g23*$_TL/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact21_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact22_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact22_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact22_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact22_            ) = { -$_5g23*$_TL/2 }      ! Position
marker.pos (              2 ,       $M_Base_contact22_            ) = { -$_3g23*$_TW/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact22_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact23_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact23_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact23_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact23_            ) = { -$_5g23*$_TL/2 }      ! Position
marker.pos (              2 ,       $M_Base_contact23_            ) = { $_3g23*$_TW/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact23_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact31_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact31_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact31_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact31_            ) = { $_5g23*$_TL/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact31_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact32_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact32_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact32_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact32_            ) = { $_5g23*$_TL/2 }       ! Position
marker.pos (              2 ,       $M_Base_contact32_            ) = { -$_3g23*$_TW/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact32_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact33_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact33_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact33_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact33_            ) = { $_5g23*$_TL/2 }       ! Position
marker.pos (              2 ,       $M_Base_contact33_            ) = { $_3g23*$_TW/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact33_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact41_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact41_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact41_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact41_            ) = { -$_5g45*$_TL/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact41_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact42_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact42_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact42_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact42_            ) = { -$_5g45*$_TL/2 }      ! Position
marker.pos (              2 ,       $M_Base_contact42_            ) = { -$_3g23*$_TW/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact42_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact43_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact43_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact43_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact43_            ) = { -$_5g45*$_TL/2 }      ! Position
marker.pos (              2 ,       $M_Base_contact43_            ) = { $_3g23*$_TW/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact43_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact51_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact51_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact51_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact51_            ) = { $_5g45*$_TL/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact51_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact52_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact52_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact52_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact52_            ) = { $_5g45*$_TL/2 }       ! Position
marker.pos (              2 ,       $M_Base_contact52_            ) = { -$_3g23*$_TW/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact52_            ) = { -$_r1 - $_esp }       ! Position

marker.type (                       $M_Base_contact53_            ) = 2                       ! Type
marker.ref (                        $M_Base_contact53_            ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact53_            ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact53_            ) = { $_5g45*$_TL/2 }       ! Position
marker.pos (              2 ,       $M_Base_contact53_            ) = { $_3g23*$_TW/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact53_            ) = { -$_r1 - $_esp }       ! Position

joint.from (                        $J_Base                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_Base                       ) = $M_Base_BRF             ! To Marker
joint.type (                        $J_Base                       ) = 25                      ! Type
joint.st.pos (            1 ,       $J_Base                       ) = -1.00000000000000006E-01 ! Position
joint.st.pos (            2 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_Base                       ) = { 5*$_r1 }              ! Position
joint.st.pos (            6 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_Base                       ) = 1.00000000000000006E-01 ! Velocity
joint.st.vel (            3 ,       $J_Base                       ) = 8.00000000000000017E-02 ! Velocity
joint.st.vel (            4 ,       $J_Base                       ) = 5.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.par (               1 ,       $J_Base                       ) = 2.00000000000000000E+00 ! [-] Axis of rotation    1
joint.par (               2 ,       $J_Base                       ) = 3.00000000000000000E+00 ! [-] Axis of rotation    2
joint.par (               3 ,       $J_Base                       ) = 1.00000000000000000E+00 ! [-] Axis of rotation    3
joint.par (               4 ,       $J_Base                       ) = 1.00000000000000000E+00 ! [-] Axis of translation 1
joint.par (               5 ,       $J_Base                       ) = 3.00000000000000000E+00 ! [-] Axis of translation 2
joint.par (               6 ,       $J_Base                       ) = 2.00000000000000000E+00 ! [-] Axis of translation 3
joint.par (               8 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Trans-rot sequence
joint.attr.2d.pos.x (     1 ,       $J_Base                       ) = -20
joint.attr.2d.pos.y (     1 ,       $J_Base                       ) = 190
joint.attr.2d.ori (       1 ,       $J_Base                       ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 20, -42.5, -42.5, -20, -20, -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 0, 0, 143, 143, 153, 163, 173
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Base        ) = -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Base        ) = 280, 207

prim.type (                         $P_Esteira                    ) = 39                      ! Type
prim.ref (                          $P_Esteira                    ) = $M_Base_BRF             ! Reference Marker
prim.pos (                3 ,       $P_Esteira                    ) = { -$_r1 }               ! Position
prim.ang (                1 ,       $P_Esteira                    ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_Esteira                    ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Esteira                    ) = 6.10000000000000000E+01 ! Colors (red component)
prim.color.g (            1 ,       $P_Esteira                    ) = 6.10000000000000000E+01 ! Colors (green component)
prim.color.b (            1 ,       $P_Esteira                    ) = 6.10000000000000000E+01 ! Colors (blue component)
prim.color.t (            1 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_Esteira                    ) = 0.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_Esteira                    ) = 2.00000000000000000E+03 ! Density
prim.par (                2 ,       $P_Esteira                    ) = './pecas_stl/Esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Esteira                    ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Esteira                    ) = 1.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Esteira                    ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Esteira                    ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation

prim.type (                         $P_C11                        ) = 15                      ! Type
prim.ref (                          $P_C11                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                3 ,       $P_C11                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C11                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C11                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C11                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C11                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C11                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C11                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C11                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C11                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C11                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C12                        ) = 15                      ! Type
prim.ref (                          $P_C12                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                2 ,       $P_C12                        ) = { -$_3g23*$_TW/2 }      ! Position
prim.pos (                3 ,       $P_C12                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C12                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C12                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C12                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C12                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C12                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C12                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C12                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C12                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C12                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C13                        ) = 15                      ! Type
prim.ref (                          $P_C13                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                2 ,       $P_C13                        ) = { $_3g23*$_TW/2 }       ! Position
prim.pos (                3 ,       $P_C13                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C13                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C13                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C13                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C13                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C13                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C13                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C13                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C13                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C13                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C21                        ) = 15                      ! Type
prim.ref (                          $P_C21                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C21                        ) = { -$_5g23*$_TL/2 }      ! Position
prim.pos (                3 ,       $P_C21                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C21                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C21                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C21                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C21                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C21                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C21                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C21                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C21                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C21                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C22                        ) = 15                      ! Type
prim.ref (                          $P_C22                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C22                        ) = { -$_5g23*$_TL/2 }      ! Position
prim.pos (                2 ,       $P_C22                        ) = { -$_3g23*$_TW/2 }      ! Position
prim.pos (                3 ,       $P_C22                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C22                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C22                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C22                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C22                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C22                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C22                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C22                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C22                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C22                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C23                        ) = 15                      ! Type
prim.ref (                          $P_C23                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C23                        ) = { -$_5g23*$_TL/2 }      ! Position
prim.pos (                2 ,       $P_C23                        ) = { $_3g23*$_TW/2 }       ! Position
prim.pos (                3 ,       $P_C23                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C23                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C23                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C23                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C23                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C23                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C23                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C23                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C23                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C23                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C31                        ) = 15                      ! Type
prim.ref (                          $P_C31                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C31                        ) = { $_5g23*$_TL/2 }       ! Position
prim.pos (                3 ,       $P_C31                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C31                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C31                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C31                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C31                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C31                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C31                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C31                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C31                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C31                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C32                        ) = 15                      ! Type
prim.ref (                          $P_C32                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C32                        ) = { $_5g23*$_TL/2 }       ! Position
prim.pos (                2 ,       $P_C32                        ) = { -$_3g23*$_TW/2 }      ! Position
prim.pos (                3 ,       $P_C32                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C32                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C32                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C32                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C32                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C32                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C32                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C32                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C32                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C32                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C33                        ) = 15                      ! Type
prim.ref (                          $P_C33                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C33                        ) = { $_5g23*$_TL/2 }       ! Position
prim.pos (                2 ,       $P_C33                        ) = { $_3g23*$_TW/2 }       ! Position
prim.pos (                3 ,       $P_C33                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C33                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C33                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C33                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C33                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C33                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C33                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C33                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C33                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C33                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C41                        ) = 15                      ! Type
prim.ref (                          $P_C41                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C41                        ) = { -$_5g45*$_TL/2 }      ! Position
prim.pos (                3 ,       $P_C41                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C41                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C41                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C41                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C41                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C41                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C41                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C41                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C41                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C41                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C42                        ) = 15                      ! Type
prim.ref (                          $P_C42                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C42                        ) = { -$_5g45*$_TL/2 }      ! Position
prim.pos (                2 ,       $P_C42                        ) = { -$_3g23*$_TW/2 }      ! Position
prim.pos (                3 ,       $P_C42                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C42                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C42                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C42                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C42                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C42                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C42                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C42                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C42                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C42                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C43                        ) = 15                      ! Type
prim.ref (                          $P_C43                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C43                        ) = { -$_5g45*$_TL/2 }      ! Position
prim.pos (                2 ,       $P_C43                        ) = { $_3g23*$_TW/2 }       ! Position
prim.pos (                3 ,       $P_C43                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C43                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C43                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C43                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C43                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C43                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C43                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C43                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C43                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C43                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C51                        ) = 15                      ! Type
prim.ref (                          $P_C51                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C51                        ) = { $_5g45*$_TL/2 }       ! Position
prim.pos (                3 ,       $P_C51                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C51                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C51                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C51                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C51                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C51                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C51                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C51                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C51                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C51                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C52                        ) = 15                      ! Type
prim.ref (                          $P_C52                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C52                        ) = { $_5g45*$_TL/2 }       ! Position
prim.pos (                2 ,       $P_C52                        ) = { -$_3g23*$_TW/2 }      ! Position
prim.pos (                3 ,       $P_C52                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C52                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C52                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C52                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C52                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C52                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C52                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C52                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C52                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C52                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C53                        ) = 15                      ! Type
prim.ref (                          $P_C53                        ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C53                        ) = { $_5g45*$_TL/2 }       ! Position
prim.pos (                2 ,       $P_C53                        ) = { $_3g23*$_TW/2 }       ! Position
prim.pos (                3 ,       $P_C53                        ) = { -$_r1 - $_esp }       ! Position
prim.color.r (            1 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C53                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C53                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C53                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C53                        ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C53                        ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C53                        ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C53                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C53                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C53                        ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_Base_Chassi1               ) = 39                      ! Type
prim.ref (                          $P_Base_Chassi1               ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_Base_Chassi1               ) = { -$_TL/2 }             ! Position
prim.pos (                2 ,       $P_Base_Chassi1               ) = { -$_TW/2 }             ! Position
prim.ang (                1 ,       $P_Base_Chassi1               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_Base_Chassi1               ) = { 90 deg }              ! Angles
prim.ang (                3 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! Angles
prim.color.r (            1 ,       $P_Base_Chassi1               ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Base_Chassi1               ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Base_Chassi1               ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Base_Chassi1               ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Base_Chassi1               ) = './pecas_stl/chassi_esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Base_Chassi1               ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Base_Chassi1               ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Base_Chassi1               ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation

prim.type (                         $P_Base_Chassi2               ) = 39                      ! Type
prim.ref (                          $P_Base_Chassi2               ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_Base_Chassi2               ) = { -$_TL/2 }             ! Position
prim.pos (                2 ,       $P_Base_Chassi2               ) = { $_TW/2 }              ! Position
prim.ang (                1 ,       $P_Base_Chassi2               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_Base_Chassi2               ) = { 90 deg }              ! Angles
prim.ang (                3 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! Angles
prim.color.r (            1 ,       $P_Base_Chassi2               ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Base_Chassi2               ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Base_Chassi2               ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Base_Chassi2               ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Base_Chassi2               ) = './pecas_stl/chassi_esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Base_Chassi2               ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Base_Chassi2               ) = 1.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Base_Chassi2               ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Base_Chassi2               ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_Roda1                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda1                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda1                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda1                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda1                      ) = 3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda1                      ) = 1.40000000000000000E+02
body.attr.2d.width (                $B_Roda1                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda1                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda1_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda1_BRF                  ) = $B_Roda1                ! Body
marker.flx.type (                   $M_Roda1_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_Roda1_transmission         ) = -92                     ! Type
marker.parent (                     $M_Roda1_transmission         ) = $B_Roda1                ! Body
marker.par (              1 ,       $M_Roda1_transmission         ) = 2.00000000000000000E+00 ! [-] Rotation axis
marker.par (              2 ,       $M_Roda1_transmission         ) = $J_Roda1                ! [-] Connection/Joint
marker.par (              3 ,       $M_Roda1_transmission         ) = 1.00000000000000000E+00 ! [-] Connection/Joint state
marker.par (              4 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_x
marker.par (              5 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_y
marker.par (              6 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_z
marker.par (              8 ,       $M_Roda1_transmission         ) = { $_r1/$_r2 - 1 }       ! [-] Multiply by (1+<fact>)
marker.par (             10 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Rotation circle radius
marker.par (             11 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [rad] Angle offset
marker.par (             13 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [-] Velocity & accel. calculation

joint.from (                        $J_Roda1                      ) = $M_Base_Roda1c          ! From Marker
joint.to (                          $J_Roda1                      ) = $M_Roda1_BRF            ! To Marker
joint.type (                        $J_Roda1                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda1                      ) = 30
joint.attr.2d.pos.y (     1 ,       $J_Roda1                      ) = 220
joint.attr.2d.ori (       1 ,       $J_Roda1                      ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 10, 10, 30, 30
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 280, 261.75, 261.75, 237
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 40, 40, 30, 30
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 180, 190, 190, 203

prim.type (                         $P_Roda1                      ) = 39                      ! Type
prim.ref (                          $P_Roda1                      ) = $M_Roda1_BRF            ! Reference Marker
prim.pos (                1 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_Roda1                      ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda1                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda1                      ) = './pecas_stl/Roda_Esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Roda1                      ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda1                      ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_Roda2                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda2                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda2                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda2                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda2                      ) = 3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda2                      ) = 5.10000000000000000E+02
body.attr.2d.width (                $B_Roda2                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda2                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda2_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda2_BRF                  ) = $B_Roda2                ! Body
marker.flx.type (                   $M_Roda2_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda2                      ) = $M_Base_Roda2c          ! From Marker
joint.to (                          $J_Roda2                      ) = $M_Roda2_BRF            ! To Marker
joint.type (                        $J_Roda2                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda2                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda2                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda2                      ) = 10
joint.attr.2d.pos.y (     1 ,       $J_Roda2                      ) = 360
joint.attr.2d.ori (       1 ,       $J_Roda2                      ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda2     ) = 10, 10
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda2     ) = 320, 343
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda2       ) = 30, 10, 10
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda2       ) = 520, 520, 377

prim.type (                         $P_Roda2                      ) = 39                      ! Type
prim.ref (                          $P_Roda2                      ) = $M_Roda2_BRF            ! Reference Marker
prim.ang (                1 ,       $P_Roda2                      ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda2                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda2                      ) = './pecas_stl/Rolete_esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Roda2                      ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda2                      ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_Roda3                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda3                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda3                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda3                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda3                      ) = -9.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda3                      ) = 5.10000000000000000E+02
body.attr.2d.width (                $B_Roda3                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda3                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda3_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda3_BRF                  ) = $B_Roda3                ! Body
marker.flx.type (                   $M_Roda3_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda3                      ) = $M_Base_Roda3c          ! From Marker
joint.to (                          $J_Roda3                      ) = $M_Roda3_BRF            ! To Marker
joint.type (                        $J_Roda3                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda3                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda3                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda3                      ) = -40
joint.attr.2d.pos.y (     1 ,       $J_Roda3                      ) = 390
joint.attr.2d.ori (       1 ,       $J_Roda3                      ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda3     ) = -30, -30, -40, -40
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda3     ) = 320, 340.75, 340.75, 373
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda3       ) = -50, -50, -40, -40, -40
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda3       ) = 510, 494.1875, 494.1875, 476.75, 407

prim.type (                         $P_Roda3                      ) = 39                      ! Type
prim.ref (                          $P_Roda3                      ) = $M_Roda3_BRF            ! Reference Marker
prim.ang (                1 ,       $P_Roda3                      ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda3                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda3                      ) = './pecas_stl/Rolete_esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Roda3                      ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda3                      ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_Roda4                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda4                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda4                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda4                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda4                      ) = -1.30000000000000000E+02
body.attr.2d.pos.y (                $B_Roda4                      ) = 2.00000000000000000E+02
body.attr.2d.width (                $B_Roda4                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda4                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda4_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda4_BRF                  ) = $B_Roda4                ! Body
marker.flx.type (                   $M_Roda4_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda4                      ) = $M_Base_Roda4c          ! From Marker
joint.to (                          $J_Roda4                      ) = $M_Roda4_BRF            ! To Marker
joint.type (                        $J_Roda4                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda4                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda4                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda4                      ) = -80
joint.attr.2d.pos.y (     1 ,       $J_Roda4                      ) = 280
joint.attr.2d.ori (       1 ,       $J_Roda4                      ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda4     ) = -40, -50, -50, -63
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda4     ) = 290, 290, 280, 280
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda4       ) = -100, -100, -97
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda4       ) = 240, 280, 280

prim.type (                         $P_Roda4                      ) = 39                      ! Type
prim.ref (                          $P_Roda4                      ) = $M_Roda4_BRF            ! Reference Marker
prim.ang (                1 ,       $P_Roda4                      ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda4                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda4                      ) = './pecas_stl/Roda_Esteira.stl' ! [-] CAD file name
prim.par (                9 ,       $P_Roda4                      ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda4                      ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_connector                  ) = 1.00000000000000006E-09 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_connector                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_connector                  ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_connector                  ) = 2.00000000000000000E+01
body.attr.2d.pos.y (                $B_connector                  ) = -2.00000000000000000E+01
body.attr.2d.width (                $B_connector                  ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_connector                  ) = 3.00000000000000000E+01

marker.type (                       $M_connector_BRF              ) = 1                       ! Type
marker.parent (                     $M_connector_BRF              ) = $B_connector            ! Body
marker.flx.type (                   $M_connector_BRF              ) = 4                       ! Flexible type

joint.from (                        $J_connector                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_connector                  ) = $M_connector_BRF        ! To Marker
joint.type (                        $J_connector                  ) = 0                       ! Type
joint.par (               1 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_connector                  ) = -20
joint.attr.2d.pos.y (     1 ,       $J_connector                  ) = -20
joint.attr.2d.ori (       1 ,       $J_connector                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_connector ) = -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_connector ) = -60, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 50, 50, -20, -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 10, 19.75, 19.75, 7, -3


body.m (                            $B_chao                       ) = 1.00000000000000004E-10 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_chao                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_chao                       ) = 0.00000000000000000E+00 ! Damping input value

marker.type (                       $M_chao_BRF                   ) = 1                       ! Type
marker.parent (                     $M_chao_BRF                   ) = $B_chao                 ! Body
marker.flx.type (                   $M_chao_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_chao_contact11             ) = -87                     ! Type
marker.parent (                     $M_chao_contact11             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact11             ) = 2.74541895778777391E-02 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact11             ) = -6.23862250867738693E-09 ! Algebraic states
marker.par (              1 ,       $M_chao_contact11             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact11             ) = $M_Base_contact11       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact11             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact12             ) = -87                     ! Type
marker.parent (                     $M_chao_contact12             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact12             ) = 2.74541895778777391E-02 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact12             ) = -9.68245820393083129E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact12             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact12             ) = $M_Base_contact12       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact12             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact13             ) = -87                     ! Type
marker.parent (                     $M_chao_contact13             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact13             ) = 2.74541895778777391E-02 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact13             ) = 9.68245869852318308E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact13             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact13             ) = $M_Base_contact13       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact13             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact21             ) = -87                     ! Type
marker.parent (                     $M_chao_contact21             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact21             ) = -2.40435413636892026E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact21             ) = -4.58669891811887594E-09 ! Algebraic states
marker.par (              1 ,       $M_chao_contact21             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact21             ) = $M_Base_contact21       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact21             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact22             ) = -87                     ! Type
marker.parent (                     $M_chao_contact22             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact22             ) = -2.40435413636892026E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact22             ) = -9.68245862127516538E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact22             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact22             ) = $M_Base_contact22       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact22             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact23             ) = -87                     ! Type
marker.parent (                     $M_chao_contact23             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact23             ) = -2.40435413636892026E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact23             ) = 9.68245915501630555E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact23             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact23             ) = $M_Base_contact23       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact23             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact31             ) = -87                     ! Type
marker.parent (                     $M_chao_contact31             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact31             ) = 2.95343792792647497E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact31             ) = 5.23143815757878315E-09 ! Algebraic states
marker.par (              1 ,       $M_chao_contact31             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact31             ) = $M_Base_contact31       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact31             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact32             ) = -87                     ! Type
marker.parent (                     $M_chao_contact32             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact32             ) = 2.95343792792647497E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact32             ) = -9.68245820774366744E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact32             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact32             ) = $M_Base_contact32       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact32             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact33             ) = -87                     ! Type
marker.parent (                     $M_chao_contact33             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact33             ) = 2.95343792792647497E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact33             ) = 9.68245880753662441E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact33             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact33             ) = $M_Base_contact33       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact33             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact41             ) = -87                     ! Type
marker.parent (                     $M_chao_contact41             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact41             ) = -4.23372171022107502E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact41             ) = -3.54571086997285162E-09 ! Algebraic states
marker.par (              1 ,       $M_chao_contact41             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact41             ) = $M_Base_contact41       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact41             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact42             ) = -87                     ! Type
marker.parent (                     $M_chao_contact42             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact42             ) = -4.23372171022107502E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact42             ) = -9.68245789167727772E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact42             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact42             ) = $M_Base_contact42       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact42             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact43             ) = -87                     ! Type
marker.parent (                     $M_chao_contact43             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact43             ) = -4.23372171022107502E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact43             ) = 9.68245827622714050E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact43             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact43             ) = $M_Base_contact43       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact43             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact51             ) = -87                     ! Type
marker.parent (                     $M_chao_contact51             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact51             ) = 4.78280550177862862E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact51             ) = -5.74679510677705533E-09 ! Algebraic states
marker.par (              1 ,       $M_chao_contact51             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact51             ) = $M_Base_contact51       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact51             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact52             ) = -87                     ! Type
marker.parent (                     $M_chao_contact52             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact52             ) = 4.78280550177862862E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact52             ) = -9.68245777297502275E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact52             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact52             ) = $M_Base_contact52       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact52             ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact53             ) = -87                     ! Type
marker.parent (                     $M_chao_contact53             ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact53             ) = 4.78280550177862862E-01 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact53             ) = 9.68245784890400113E-02 ! Algebraic states
marker.par (              1 ,       $M_chao_contact53             ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact53             ) = $M_Base_contact53       ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact53             ) = $P_chao                 ! [-] Contact geometry Primitive

joint.from (                        $J_chao                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_chao                       ) = $M_chao_BRF             ! To Marker
joint.type (                        $J_chao                       ) = 0                       ! Type
joint.par (               1 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_chao_prisma                ) = 5                       ! Type
prim.ref (                          $P_chao_prisma                ) = $M_chao_BRF             ! Reference Marker
prim.ang (                1 ,       $P_chao_prisma                ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   1 , $P_chao_prisma                ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   2 , $P_chao_prisma                ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   3 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   4 , $P_chao_prisma                ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   5 , $P_chao_prisma                ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   6 , $P_chao_prisma                ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   7 , $P_chao_prisma                ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   8 , $P_chao_prisma                ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   9 , $P_chao_prisma                ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  10 , $P_chao_prisma                ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  11 , $P_chao_prisma                ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  12 , $P_chao_prisma                ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  13 , $P_chao_prisma                ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  14 , $P_chao_prisma                ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  15 , $P_chao_prisma                ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  16 , $P_chao_prisma                ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  17 , $P_chao_prisma                ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  18 , $P_chao_prisma                ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  19 , $P_chao_prisma                ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  20 , $P_chao_prisma                ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  21 , $P_chao_prisma                ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  22 , $P_chao_prisma                ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  23 , $P_chao_prisma                ) = 2.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  24 , $P_chao_prisma                ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  25 , $P_chao_prisma                ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  26 , $P_chao_prisma                ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  27 , $P_chao_prisma                ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  28 , $P_chao_prisma                ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  29 , $P_chao_prisma                ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  30 , $P_chao_prisma                ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  31 , $P_chao_prisma                ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  32 , $P_chao_prisma                ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  33 , $P_chao_prisma                ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  34 , $P_chao_prisma                ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  35 , $P_chao_prisma                ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  36 , $P_chao_prisma                ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  37 , $P_chao_prisma                ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  38 , $P_chao_prisma                ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  39 , $P_chao_prisma                ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  40 , $P_chao_prisma                ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  41 , $P_chao_prisma                ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  42 , $P_chao_prisma                ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  43 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  44 , $P_chao_prisma                ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  45 , $P_chao_prisma                ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   1 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   2 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   3 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   4 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   5 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   6 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   7 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   8 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   9 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  10 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  11 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  12 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  13 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  14 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  15 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  16 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  17 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  18 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  19 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  20 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  21 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  22 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  23 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  24 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  25 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  26 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  27 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  28 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  29 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  30 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  31 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  32 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  33 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  34 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  35 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  36 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  37 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  38 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  39 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  40 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  41 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  42 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  43 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  44 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  45 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.color.r (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_chao_prisma                ) = 1.00000000000000000E+00 ! Transparency
prim.par (                2 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Contour by
prim.par (                4 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Contour
prim.par (                6 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Curve fitting type
prim.par (                7 ,       $P_chao_prisma                ) = 3.00000000000000000E+00 ! [-] Spline Degree
prim.par (                9 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Material side
prim.par (               10 ,       $P_chao_prisma                ) = 4.00000000000000000E+00 ! [m] Depth
prim.par (               11 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [m] Wall thickness
prim.par (               12 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (               13 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (               14 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [m] Graphics discretization sag
prim.par (               15 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [rad] Graphics discretization angle
prim.par (               17 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Graphics start
prim.par (               18 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Graphics end

prim.type (                         $P_chao                       ) = 43                      ! Type
prim.ref (                          $P_chao                       ) = $M_chao_BRF             ! Reference Marker
prim.vtx (                1 ,   1 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   2 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   3 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   4 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   5 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   6 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   7 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   8 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   9 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  10 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  11 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  12 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  14 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  15 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  16 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  17 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  18 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  19 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  20 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  21 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  22 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  23 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  24 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  25 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   1 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   2 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   4 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   5 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   6 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   7 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   8 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   9 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  10 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  11 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  12 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  14 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  15 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  16 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  17 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  18 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  19 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  20 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  21 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  22 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  23 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  24 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  25 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   1 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   2 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   4 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   5 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   6 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   7 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   8 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   9 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  10 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  11 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  12 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  14 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  15 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  16 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  17 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  18 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  19 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  20 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  21 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  22 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  23 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  24 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  25 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.color.r (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_chao                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Surface by
prim.par (                7 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Coordinate type
prim.par (                8 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Surface fitting type
prim.par (                9 ,       $P_chao                       ) = 3.00000000000000000E+00 ! [-] Spline degree in 1st dir
prim.par (               10 ,       $P_chao                       ) = 3.00000000000000000E+00 ! [-] Spline degree in 2nd dir
prim.par (               17 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] No. graphic points in 1st dir
prim.par (               18 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] No. graphic points in 2nd dir
prim.par (               19 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics start 1st dir
prim.par (               20 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics end 1st dir
prim.par (               21 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics start 2nd dir
prim.par (               22 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics end 2nd dir


!**********************************************************************
! Constraints
!**********************************************************************
constr.from (                       $L_4                          ) = $M_Roda1_BRF            ! From Marker
constr.to (                         $L_4                          ) = $M_Roda4_BRF            ! To Marker
constr.type (                       $L_4                          ) = 25                      ! Type
constr.f (                1 ,       $L_4                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_4                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_4                          ) = -20
constr.attr.2d.pos.y (    1 ,       $L_4                          ) = 460
constr.attr.2d.ori (      1 ,       $L_4                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_4        ) = 50, 50, 40, 40, 40, -20, -20, -20
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_4        ) = 180, 237.1171875, 237.1171875, 256.15625, 332.3125, 332.3125, 379.75, 443
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_4          ) = -70, -45.9375, -45.9375, -3.75, 15, 40, 40, 40, 40, 40, 40, 20, 20, 20, 20, -20, -20
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_4          ) = 230, 230, 242.94670104980469, 242.94670104980469, 242.94670104980469, 242.94670104980469, 281.78680419921875, 299.049072265625, 322.0654296875, 352.75390625, 393.671875, 393.671875, 403.671875, 461.5625, 538.75, 538.75, 477

constr.from (                       $L_2                          ) = $M_Roda1_transmission   ! From Marker
constr.to (                         $L_2                          ) = $M_Roda2_BRF            ! To Marker
constr.type (                       $L_2                          ) = 25                      ! Type
constr.f (                1 ,       $L_2                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_2                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_2                          ) = 60
constr.attr.2d.pos.y (    1 ,       $L_2                          ) = 280
constr.attr.2d.ori (      1 ,       $L_2                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_2        ) = 60, 60
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_2        ) = 180, 263
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_2          ) = 70, 70, 60, 60, 60, 60
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_2          ) = 510, 400.1875, 400.1875, 390.1875, 350.25, 297

constr.from (                       $L_3                          ) = $M_Roda1_transmission   ! From Marker
constr.to (                         $L_3                          ) = $M_Roda3_BRF            ! To Marker
constr.type (                       $L_3                          ) = 25                      ! Type
constr.f (                1 ,       $L_3                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_3                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_3                          ) = 50
constr.attr.2d.pos.y (    1 ,       $L_3                          ) = 420
constr.attr.2d.ori (      1 ,       $L_3                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_3        ) = 80, 80, 70, 60, 50, 50, 50
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_3        ) = 180, 305.4375, 305.4375, 305.4375, 305.4375, 347.25, 403
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_3          ) = -40, -40, 50, 50
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_3          ) = 510, 484.25, 484.25, 437

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_1                          ) = 50                      ! Type
force.from (                        $F_1                          ) = $M_connector_BRF        ! From Marker
force.to (                          $F_1                          ) = $M_Roda1_BRF            ! To Marker
force.disabled (                    $F_1                          ) = 0                       ! Disabled
force.par (               1 ,       $F_1                          ) = $M_connector_BRF        ! [-] Reference Marker for calc.
force.par (               3 ,       $F_1                          ) = null                    ! [-] Expression for Fx
force.par (               4 ,       $F_1                          ) = null                    ! [-] Expression for Fy
force.par (               5 ,       $F_1                          ) = null                    ! [-] Expression for Fz
force.par (               6 ,       $F_1                          ) = null                    ! [-] Expression for Lx
force.par (               7 ,       $F_1                          ) = $X_My_roda1             ! [-] Expression for Ly
force.par (               8 ,       $F_1                          ) = null                    ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_1                          ) = 10
force.attr.2d.pos.y (     1 ,       $F_1                          ) = 50
force.attr.2d.ori (       1 ,       $F_1                          ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_1         ) = 40, 40, 10, 10
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_1         ) = 10, 20, 20, 33
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_1           ) = 30, 10, 10
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_1           ) = 150, 150, 67

force.type (                        $F_base                       ) = 50                      ! Type
force.from (                        $F_base                       ) = $M_chao_contact11       ! From Marker
force.to (                          $F_base                       ) = $M_Base_BRF             ! To Marker
force.par (               1 ,       $F_base                       ) = $M_Base_BRF             ! [-] Reference Marker for calc.
force.par (               3 ,       $F_base                       ) = $X_Fx                   ! [-] Expression for Fx
force.par (               4 ,       $F_base                       ) = $X_Fy                   ! [-] Expression for Fy
force.par (               5 ,       $F_base                       ) = $X_Fz                   ! [-] Expression for Fz
force.par (               6 ,       $F_base                       ) = $X_Mx                   ! [-] Expression for Lx
force.par (               7 ,       $F_base                       ) = $X_My                   ! [-] Expression for Ly
force.par (               8 ,       $F_base                       ) = $X_Mz                   ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_base                       ) = -20
force.attr.2d.pos.y (     1 ,       $F_base                       ) = 120
force.attr.2d.ori (       1 ,       $F_base                       ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_base      ) = 30, 30, -20, -20, -20
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_base      ) = 10, 25.1875, 25.1875, 40.75, 103
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_base        ) = 0, 0, -10, -20, -20
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_base        ) = 280, 172.75, 172.75, 172.75, 137

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_wy                         ) = 'WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx                         ) = 'VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx11                       ) = 'VX($M_Base_contact11_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx12                       ) = 'VX($M_Base_contact12_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx13                       ) = 'VX($M_Base_contact13_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx21                       ) = 'VX($M_Base_contact21_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx22                       ) = 'VX($M_Base_contact22_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx23                       ) = 'VX($M_Base_contact23_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx31                       ) = 'VX($M_Base_contact31_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx32                       ) = 'VX($M_Base_contact32_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx33                       ) = 'VX($M_Base_contact33_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx41                       ) = 'VX($M_Base_contact41_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx42                       ) = 'VX($M_Base_contact42_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx43                       ) = 'VX($M_Base_contact43_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx51                       ) = 'VX($M_Base_contact51_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx52                       ) = 'VX($M_Base_contact52_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx53                       ) = 'VX($M_Base_contact53_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy11                       ) = 'VY($M_Base_contact11_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy12                       ) = 'VY($M_Base_contact12_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy13                       ) = 'VY($M_Base_contact13_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy21                       ) = 'VY($M_Base_contact21_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy22                       ) = 'VY($M_Base_contact22_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy23                       ) = 'VY($M_Base_contact23_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy31                       ) = 'VY($M_Base_contact31_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy32                       ) = 'VY($M_Base_contact32_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy33                       ) = 'VY($M_Base_contact33_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy41                       ) = 'VY($M_Base_contact41_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy42                       ) = 'VY($M_Base_contact42_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy43                       ) = 'VY($M_Base_contact43_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy51                       ) = 'VY($M_Base_contact51_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy52                       ) = 'VY($M_Base_contact52_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy53                       ) = 'VY($M_Base_contact53_,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vrel                       ) = '$X_vx - $_r1*$X_wy'    ! Definition
express.txt (                       $X_vrel                       ) = '[br][br]VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF) - $_r1*WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)' ! Comment

express.str (                       $X_vrel11                     ) = '$X_vx11 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel12                     ) = '$X_vx12 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel13                     ) = '$X_vx13 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel21                     ) = '$X_vx21 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel22                     ) = '$X_vx22 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel23                     ) = '$X_vx23 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel31                     ) = '$X_vx31 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel32                     ) = '$X_vx32 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel33                     ) = '$X_vx33 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel41                     ) = '$X_vx41 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel42                     ) = '$X_vx42 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel43                     ) = '$X_vx43 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel51                     ) = '$X_vx51 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel52                     ) = '$X_vx52 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vrel53                     ) = '$X_vx53 - $_r1*$X_wy'  ! Definition

express.str (                       $X_vsref                      ) = 'max(abs($X_vx) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref11                    ) = 'max(abs($X_vx11) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref12                    ) = 'max(abs($X_vx12) , $_r1*abs($X_wy))\n' ! Definition

express.str (                       $X_vsref13                    ) = 'max(abs($X_vx13) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref21                    ) = 'max(abs($X_vx21) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref22                    ) = 'max(abs($X_vx22) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref23                    ) = 'max(abs($X_vx23) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref31                    ) = 'max(abs($X_vx31) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref32                    ) = 'max(abs($X_vx32) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref33                    ) = 'max(abs($X_vx33) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref41                    ) = 'max(abs($X_vx41) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref42                    ) = 'max(abs($X_vx42) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref43                    ) = 'max(abs($X_vx43) , $_r1*abs($X_wy))\n' ! Definition

express.str (                       $X_vsref51                    ) = 'max(abs($X_vx51) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref52                    ) = 'max(abs($X_vx52) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_vsref53                    ) = 'max(abs($X_vx53) , $_r1*abs($X_wy))' ! Definition

express.str (                       $X_sx                         ) = 'IF($X_vsref > 0)\n{\nabs(-$X_vrel/$X_vsref)\n}\nELSE\n{\n0\n}' ! Definition
express.txt (                       $X_sx                         ) = '[br][br][br][br]IF(abs(VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF)) - ($_r1)*abs(WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF))\\>0)[br]{[br]-$X_vrel/abs(VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF))[br]}[br]ELSE[br]{[br]-$X_vrel/(($_r1)*abs(WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)))[br]}' ! Comment

express.str (                       $X_sx11                       ) = 'IF($X_vsref11 > 0)\n{\nabs(-$X_vrel11/$X_vsref11)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx12                       ) = 'IF($X_vsref12 > 0)\n{\nabs(-$X_vrel12/$X_vsref12)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx13                       ) = 'IF($X_vsref13 > 0)\n{\nabs(-$X_vrel13/$X_vsref13)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx21                       ) = 'IF($X_vsref21 > 0)\n{\nabs(-$X_vrel21/$X_vsref21)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx22                       ) = 'IF($X_vsref22 > 0)\n{\nabs(-$X_vrel22/$X_vsref22)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx23                       ) = 'IF($X_vsref23 > 0)\n{\nabs(-$X_vrel23/$X_vsref23)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx31                       ) = 'IF($X_vsref31 > 0)\n{\nabs(-$X_vrel31/$X_vsref31)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx32                       ) = 'IF($X_vsref32 > 0)\n{\nabs(-$X_vrel32/$X_vsref32)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx33                       ) = 'IF($X_vsref33 > 0)\n{\nabs(-$X_vrel33/$X_vsref33)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx41                       ) = 'IF($X_vsref41 > 0)\n{\nabs(-$X_vrel41/$X_vsref41)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx42                       ) = 'IF($X_vsref42 > 0)\n{\nabs(-$X_vrel42/$X_vsref42)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx43                       ) = 'IF($X_vsref43 > 0)\n{\nabs(-$X_vrel43/$X_vsref43)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx51                       ) = 'IF($X_vsref51 > 0)\n{\nabs(-$X_vrel51/$X_vsref51)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx52                       ) = 'IF($X_vsref52 > 0)\n{\nabs(-$X_vrel52/$X_vsref52)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sx53                       ) = 'IF($X_vsref53 > 0)\n{\nabs(-$X_vrel53/$X_vsref53)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy11                       ) = 'IF($X_vsref11 > 0)\n{\nabs($X_vy11/$X_vsref11)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy12                       ) = 'IF($X_vsref12 > 0)\n{\nabs($X_vy12/$X_vsref12)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy13                       ) = 'IF($X_vsref13 > 0)\n{\nabs($X_vy13/$X_vsref13)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy21                       ) = 'IF($X_vsref21> 0)\n{\nabs($X_vy21/$X_vsref21)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy22                       ) = 'IF($X_vsref22> 0)\n{\nabs($X_vy22/$X_vsref22)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy23                       ) = 'IF($X_vsref23> 0)\n{\nabs($X_vy23/$X_vsref23)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy31                       ) = 'IF($X_vsref31> 0)\n{\nabs($X_vy31/$X_vsref31)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy32                       ) = 'IF($X_vsref32> 0)\n{\nabs($X_vy32/$X_vsref32)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy33                       ) = 'IF($X_vsref33> 0)\n{\nabs($X_vy33/$X_vsref33)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy41                       ) = 'IF($X_vsref41> 0)\n{\nabs($X_vy41/$X_vsref41)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy42                       ) = 'IF($X_vsref42> 0)\n{\nabs($X_vy42/$X_vsref42)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy43                       ) = 'IF($X_vsref43> 0)\n{\nabs($X_vy43/$X_vsref43)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy51                       ) = 'IF($X_vsref51> 0)\n{\nabs($X_vy51/$X_vsref51)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy52                       ) = 'IF($X_vsref52> 0)\n{\nabs($X_vy52/$X_vsref52)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy53                       ) = 'IF($X_vsref53> 0)\n{\nabs($X_vy53/$X_vsref53)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_s11                        ) = 'sqrt($X_sx11^2 + ($X_sy11/$_alpha)^2)' ! Definition

express.str (                       $X_s12                        ) = 'sqrt($X_sx12^2 + ($X_sy12/$_alpha)^2)' ! Definition

express.str (                       $X_s13                        ) = 'sqrt($X_sx13^2 + ($X_sy13/$_alpha)^2)' ! Definition

express.str (                       $X_s21                        ) = 'sqrt($X_sx21^2 + ($X_sy21/$_alpha)^2)' ! Definition

express.str (                       $X_s22                        ) = 'sqrt($X_sx22^2 + ($X_sy22/$_alpha)^2)' ! Definition

express.str (                       $X_s23                        ) = 'sqrt($X_sx23^2 + ($X_sy23/$_alpha)^2)' ! Definition

express.str (                       $X_s31                        ) = 'sqrt($X_sx31^2 + ($X_sy31/$_alpha)^2)' ! Definition

express.str (                       $X_s32                        ) = 'sqrt($X_sx32^2 + ($X_sy32/$_alpha)^2)' ! Definition

express.str (                       $X_s33                        ) = 'sqrt($X_sx33^2 + ($X_sy33/$_alpha)^2)' ! Definition

express.str (                       $X_s41                        ) = 'sqrt($X_sx41^2 + ($X_sy41/$_alpha)^2)' ! Definition

express.str (                       $X_s42                        ) = 'sqrt($X_sx42^2 + ($X_sy42/$_alpha)^2)' ! Definition

express.str (                       $X_s43                        ) = 'sqrt($X_sx43^2 + ($X_sy43/$_alpha)^2)' ! Definition

express.str (                       $X_s51                        ) = 'sqrt($X_sx51^2 + ($X_sy51/$_alpha)^2)' ! Definition

express.str (                       $X_s52                        ) = 'sqrt($X_sx52^2 + ($X_sy52/$_alpha)^2)' ! Definition

express.str (                       $X_s53                        ) = 'sqrt($X_sx53^2 + ($X_sy53/$_alpha)^2)' ! Definition

express.str (                       $X_dist_borda11               ) = 'DZ($M_Base_contact11_,$M_chao_contact11,$M_chao_contact11)' ! Definition
express.txt (                       $X_dist_borda11               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda12               ) = 'DZ($M_Base_contact12_,$M_chao_contact12,$M_chao_contact12)' ! Definition
express.txt (                       $X_dist_borda12               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda13               ) = 'DZ($M_Base_contact13_,$M_chao_contact13,$M_chao_contact13)' ! Definition
express.txt (                       $X_dist_borda13               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda21               ) = 'DZ($M_Base_contact21_,$M_chao_contact21,$M_chao_contact21)' ! Definition
express.txt (                       $X_dist_borda21               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda22               ) = 'DZ($M_Base_contact22_,$M_chao_contact22,$M_chao_contact22)' ! Definition
express.txt (                       $X_dist_borda22               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda23               ) = 'DZ($M_Base_contact23_,$M_chao_contact23,$M_chao_contact23)' ! Definition
express.txt (                       $X_dist_borda23               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda31               ) = 'DZ($M_Base_contact31_,$M_chao_contact31,$M_chao_contact31)' ! Definition
express.txt (                       $X_dist_borda31               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda32               ) = 'DZ($M_Base_contact32_,$M_chao_contact32,$M_chao_contact32)' ! Definition
express.txt (                       $X_dist_borda32               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda33               ) = 'DZ($M_Base_contact33_,$M_chao_contact33,$M_chao_contact33)' ! Definition
express.txt (                       $X_dist_borda33               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda41               ) = 'DZ($M_Base_contact41_,$M_chao_contact41,$M_chao_contact41)' ! Definition
express.txt (                       $X_dist_borda41               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda42               ) = 'DZ($M_Base_contact42_,$M_chao_contact42,$M_chao_contact42)' ! Definition
express.txt (                       $X_dist_borda42               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda43               ) = 'DZ($M_Base_contact43_,$M_chao_contact43,$M_chao_contact43)' ! Definition
express.txt (                       $X_dist_borda43               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda51               ) = 'DZ($M_Base_contact51_,$M_chao_contact51,$M_chao_contact51)' ! Definition
express.txt (                       $X_dist_borda51               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda52               ) = 'DZ($M_Base_contact52_,$M_chao_contact52,$M_chao_contact52)' ! Definition
express.txt (                       $X_dist_borda52               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda53               ) = 'DZ($M_Base_contact53_,$M_chao_contact53,$M_chao_contact53)' ! Definition
express.txt (                       $X_dist_borda53               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $dX_dist_borda11              ) = 'VZ($M_Base_contact11_,$M_chao_contact11,$M_chao_contact11)' ! Definition
express.txt (                       $dX_dist_borda11              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda12              ) = 'VZ($M_Base_contact12_,$M_chao_contact12,$M_chao_contact12)' ! Definition
express.txt (                       $dX_dist_borda12              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda13              ) = 'VZ($M_Base_contact13_,$M_chao_contact13,$M_chao_contact13)' ! Definition
express.txt (                       $dX_dist_borda13              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda21              ) = 'VZ($M_Base_contact21_,$M_chao_contact21,$M_chao_contact21)' ! Definition
express.txt (                       $dX_dist_borda21              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda22              ) = 'VZ($M_Base_contact22_,$M_chao_contact22,$M_chao_contact22)' ! Definition
express.txt (                       $dX_dist_borda22              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda23              ) = 'VZ($M_Base_contact23_,$M_chao_contact23,$M_chao_contact23)' ! Definition
express.txt (                       $dX_dist_borda23              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda31              ) = 'VZ($M_Base_contact31_,$M_chao_contact31,$M_chao_contact31)' ! Definition
express.txt (                       $dX_dist_borda31              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda32              ) = 'VZ($M_Base_contact32_,$M_chao_contact32,$M_chao_contact32)' ! Definition
express.txt (                       $dX_dist_borda32              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda33              ) = 'VZ($M_Base_contact33_,$M_chao_contact33,$M_chao_contact33)' ! Definition
express.txt (                       $dX_dist_borda33              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda41              ) = 'VZ($M_Base_contact41_,$M_chao_contact41,$M_chao_contact41)' ! Definition
express.txt (                       $dX_dist_borda41              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda42              ) = 'VZ($M_Base_contact42_,$M_chao_contact42,$M_chao_contact42)' ! Definition
express.txt (                       $dX_dist_borda42              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda43              ) = 'VZ($M_Base_contact43_,$M_chao_contact43,$M_chao_contact43)' ! Definition
express.txt (                       $dX_dist_borda43              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda51              ) = 'VZ($M_Base_contact51_,$M_chao_contact51,$M_chao_contact51)' ! Definition
express.txt (                       $dX_dist_borda51              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda52              ) = 'VZ($M_Base_contact52_,$M_chao_contact52,$M_chao_contact52)' ! Definition
express.txt (                       $dX_dist_borda52              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda53              ) = 'VZ($M_Base_contact53_,$M_chao_contact53,$M_chao_contact53)' ! Definition
express.txt (                       $dX_dist_borda53              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $X_delta11                    ) = 'IF($X_dist_borda11 < 0)\n{\n-$X_dist_borda11\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta12                    ) = 'IF($X_dist_borda12 < 0)\n{\n-$X_dist_borda12\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta13                    ) = 'IF($X_dist_borda13 < 0)\n{\n-$X_dist_borda13\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta21                    ) = 'IF($X_dist_borda21 < 0)\n{\n-$X_dist_borda21\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta22                    ) = 'IF($X_dist_borda22 < 0)\n{\n-$X_dist_borda22\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta23                    ) = 'IF($X_dist_borda23 < 0)\n{\n-$X_dist_borda23\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta31                    ) = 'IF($X_dist_borda31 < 0)\n{\n-$X_dist_borda31\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta32                    ) = 'IF($X_dist_borda32 < 0)\n{\n-$X_dist_borda32\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta33                    ) = 'IF($X_dist_borda33 < 0)\n{\n-$X_dist_borda33\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta41                    ) = 'IF($X_dist_borda41 < 0)\n{\n-$X_dist_borda41\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta42                    ) = 'IF($X_dist_borda42 < 0)\n{\n-$X_dist_borda42\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta43                    ) = 'IF($X_dist_borda43 < 0)\n{\n-$X_dist_borda43\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta51                    ) = 'IF($X_dist_borda51 < 0)\n{\n-$X_dist_borda51\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta52                    ) = 'IF($X_dist_borda52 < 0)\n{\n-$X_dist_borda52\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta53                    ) = 'IF($X_dist_borda53 < 0)\n{\n-$X_dist_borda53\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta11                   ) = 'IF($X_dist_borda11 < 0)\n{\n-$dX_dist_borda11\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta12                   ) = 'IF($X_dist_borda12 < 0)\n{\n-$dX_dist_borda12\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta13                   ) = 'IF($X_dist_borda13 < 0)\n{\n-$dX_dist_borda13\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta21                   ) = 'IF($X_dist_borda21 < 0)\n{\n-$dX_dist_borda21\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta22                   ) = 'IF($X_dist_borda22 < 0)\n{\n-$dX_dist_borda22\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta23                   ) = 'IF($X_dist_borda23 < 0)\n{\n-$dX_dist_borda23\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta31                   ) = 'IF($X_dist_borda31 < 0)\n{\n-$dX_dist_borda31\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta32                   ) = 'IF($X_dist_borda32 < 0)\n{\n-$dX_dist_borda32\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta33                   ) = 'IF($X_dist_borda33 < 0)\n{\n-$dX_dist_borda33\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta41                   ) = 'IF($X_dist_borda41 < 0)\n{\n-$dX_dist_borda41\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta42                   ) = 'IF($X_dist_borda42 < 0)\n{\n-$dX_dist_borda42\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta43                   ) = 'IF($X_dist_borda43 < 0)\n{\n-$dX_dist_borda43\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta51                   ) = 'IF($X_dist_borda51 < 0)\n{\n-$dX_dist_borda51\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta52                   ) = 'IF($X_dist_borda52 < 0)\n{\n-$dX_dist_borda52\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta53                   ) = 'IF($X_dist_borda53 < 0)\n{\n-$dX_dist_borda53\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_dWdA11                     ) = '$_ksolo*$X_delta11 + $_csolo*$dX_delta11' ! Definition

express.str (                       $X_dWdA12                     ) = '$_ksolo*$X_delta12 + $_csolo*$dX_delta12' ! Definition

express.str (                       $X_dWdA13                     ) = '$_ksolo*$X_delta13 + $_csolo*$dX_delta13' ! Definition

express.str (                       $X_dWdA21                     ) = '$_ksolo*$X_delta21 + $_csolo*$dX_delta21' ! Definition

express.str (                       $X_dWdA22                     ) = '$_ksolo*$X_delta22 + $_csolo*$dX_delta22' ! Definition

express.str (                       $X_dWdA23                     ) = '$_ksolo*$X_delta23 + $_csolo*$dX_delta23' ! Definition

express.str (                       $X_dWdA31                     ) = '$_ksolo*$X_delta31 + $_csolo*$dX_delta31' ! Definition

express.str (                       $X_dWdA32                     ) = '$_ksolo*$X_delta32 + $_csolo*$dX_delta32' ! Definition

express.str (                       $X_dWdA33                     ) = '$_ksolo*$X_delta33 + $_csolo*$dX_delta33' ! Definition

express.str (                       $X_dWdA41                     ) = '$_ksolo*$X_delta41 + $_csolo*$dX_delta41' ! Definition

express.str (                       $X_dWdA42                     ) = '$_ksolo*$X_delta42 + $_csolo*$dX_delta42' ! Definition

express.str (                       $X_dWdA43                     ) = '$_ksolo*$X_delta43 + $_csolo*$dX_delta43' ! Definition

express.str (                       $X_dWdA51                     ) = '$_ksolo*$X_delta51 + $_csolo*$dX_delta51' ! Definition

express.str (                       $X_dWdA52                     ) = '$_ksolo*$X_delta52 + $_csolo*$dX_delta52' ! Definition

express.str (                       $X_dWdA53                     ) = '$_ksolo*$X_delta53 + $_csolo*$dX_delta53' ! Definition

express.str (                       $X_W                          ) = '($_A/4)*(\n$_5gW1*($_3gW1*$X_dWdA11+$_3gW23*($X_dWdA12+$X_dWdA13))\n+\n$_5gW23*($_3gW1*($X_dWdA21+$X_dWdA31)+$_3gW23*($X_dWdA22+$X_dWdA23+$X_dWdA32+$X_dWdA33))\n+\n$_5gW45*($_3gW1*($X_dWdA41+$X_dWdA51)+$_3gW23*($X_dWdA42+$X_dWdA43+$X_dWdA52+$X_dWdA53))\n)\n' ! Definition

express.str (                       $X_W2                         ) = 'IF(abs($X_W) > 0.1)\n{\nabs($X_W)\n}\nELSE\n{\n0.1\n}' ! Definition

express.str (                       $X_WMy                        ) = '-($_A/4)*(\n$_5gW23*$_5g23*($_3gW1*(-$X_dWdA21+$X_dWdA31)+$_3gW23*(-$X_dWdA22-$X_dWdA23+$X_dWdA32+$X_dWdA33))\n+\n$_5gW45*$_5g45*($_3gW1*(-$X_dWdA41+$X_dWdA51)+$_3gW23*(-$X_dWdA42-$X_dWdA43+$X_dWdA52+$X_dWdA53))\n)*$_TL/2\n' ! Definition

express.str (                       $X_Bn                         ) = '($_CI*$_TL*$_TW/($X_W2*(1-exp(-$_CI/(0.698*10^6)))))*5/(1+6*($_TW/$_TL))' ! Definition

express.str (                       $X_DWR                        ) = '1+(-$X_WMy/$X_W2)/$_TL' ! Definition

express.str (                       $X_DWI                        ) = '1-abs(0.7*($X_DWR-1)/($X_DWR+1))' ! Definition

express.str (                       $X_GTR11                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s11))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR12                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s12))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR13                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s13))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR21                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s21))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR22                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s22))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR23                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s23))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR31                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s31))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR32                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s32))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR33                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s33))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR41                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s41))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR42                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s42))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR43                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s43))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR51                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s51))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR52                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s52))+0.03/$X_DWI' ! Definition

express.str (                       $X_GTR53                      ) = '1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*$X_s53))+0.03/$X_DWI' ! Definition

express.str (                       $X_dGTdA11                    ) = '$X_dWdA11*$X_GTR11'    ! Definition

express.str (                       $X_dGTdA12                    ) = '$X_dWdA12*$X_GTR12'    ! Definition

express.str (                       $X_dGTdA13                    ) = '$X_dWdA13*$X_GTR13'    ! Definition

express.str (                       $X_dGTdA21                    ) = '$X_dWdA21*$X_GTR21'    ! Definition

express.str (                       $X_dGTdA22                    ) = '$X_dWdA22*$X_GTR22'    ! Definition

express.str (                       $X_dGTdA23                    ) = '$X_dWdA23*$X_GTR23'    ! Definition

express.str (                       $X_dGTdA31                    ) = '$X_dWdA31*$X_GTR31'    ! Definition

express.str (                       $X_dGTdA32                    ) = '$X_dWdA32*$X_GTR32'    ! Definition

express.str (                       $X_dGTdA33                    ) = '$X_dWdA33*$X_GTR33'    ! Definition

express.str (                       $X_dGTdA41                    ) = '$X_dWdA41*$X_GTR41'    ! Definition

express.str (                       $X_dGTdA42                    ) = '$X_dWdA42*$X_GTR42'    ! Definition

express.str (                       $X_dGTdA43                    ) = '$X_dWdA43*$X_GTR43'    ! Definition

express.str (                       $X_dGTdA51                    ) = '$X_dWdA51*$X_GTR51'    ! Definition

express.str (                       $X_dGTdA52                    ) = '$X_dWdA52*$X_GTR52'    ! Definition

express.str (                       $X_dGTdA53                    ) = '$X_dWdA53*$X_GTR53'    ! Definition

express.str (                       $X_dGTxdA11                   ) = '($X_sx11/$X_s11)*$X_dGTdA11*tanh(-1000*$X_vrel11)' ! Definition

express.str (                       $X_dGTxdA12                   ) = '($X_sx12/$X_s12)*$X_dGTdA12*tanh(-1000*$X_vrel12)' ! Definition

express.str (                       $X_dGTxdA13                   ) = '($X_sx13/$X_s13)*$X_dGTdA13*tanh(-1000*$X_vrel13)' ! Definition

express.str (                       $X_dGTxdA21                   ) = '($X_sx21/$X_s21)*$X_dGTdA21*tanh(-1000*$X_vrel21)' ! Definition

express.str (                       $X_dGTxdA22                   ) = '($X_sx22/$X_s22)*$X_dGTdA22*tanh(-1000*$X_vrel22)' ! Definition

express.str (                       $X_dGTxdA23                   ) = '($X_sx23/$X_s23)*$X_dGTdA23*tanh(-1000*$X_vrel23)' ! Definition

express.str (                       $X_dGTxdA31                   ) = '($X_sx31/$X_s31)*$X_dGTdA31*tanh(-1000*$X_vrel31)' ! Definition

express.str (                       $X_dGTxdA32                   ) = '($X_sx32/$X_s32)*$X_dGTdA32*tanh(-1000*$X_vrel32)' ! Definition

express.str (                       $X_dGTxdA33                   ) = '($X_sx33/$X_s33)*$X_dGTdA33*tanh(-1000*$X_vrel33)' ! Definition

express.str (                       $X_dGTxdA41                   ) = '($X_sx41/$X_s41)*$X_dGTdA41*tanh(-1000*$X_vrel41)' ! Definition

express.str (                       $X_dGTxdA42                   ) = '($X_sx42/$X_s42)*$X_dGTdA42*tanh(-1000*$X_vrel42)' ! Definition

express.str (                       $X_dGTxdA43                   ) = '($X_sx43/$X_s43)*$X_dGTdA43*tanh(-1000*$X_vrel43)' ! Definition

express.str (                       $X_dGTxdA51                   ) = '($X_sx51/$X_s51)*$X_dGTdA51*tanh(-1000*$X_vrel51)' ! Definition

express.str (                       $X_dGTxdA52                   ) = '($X_sx52/$X_s52)*$X_dGTdA52*tanh(-1000*$X_vrel52)' ! Definition

express.str (                       $X_dGTxdA53                   ) = '($X_sx53/$X_s53)*$X_dGTdA53*tanh(-1000*$X_vrel53)' ! Definition

express.str (                       $X_dGTydA11                   ) = '($X_sy11/($_alpha*$X_s11))*$X_dGTdA11*tanh(-1000*$X_vy11)' ! Definition

express.str (                       $X_dGTydA12                   ) = '($X_sy12/($_alpha*$X_s12))*$X_dGTdA12*tanh(-1000*$X_vy12)' ! Definition

express.str (                       $X_dGTydA13                   ) = '($X_sy13/($_alpha*$X_s13))*$X_dGTdA13*tanh(-1000*$X_vy13)' ! Definition

express.str (                       $X_dGTydA21                   ) = '($X_sy21/($_alpha*$X_s21))*$X_dGTdA21*tanh(-1000*$X_vy21)' ! Definition

express.str (                       $X_dGTydA22                   ) = '($X_sy22/($_alpha*$X_s22))*$X_dGTdA22*tanh(-1000*$X_vy22)' ! Definition

express.str (                       $X_dGTydA23                   ) = '($X_sy23/($_alpha*$X_s23))*$X_dGTdA23*tanh(-1000*$X_vy23)' ! Definition

express.str (                       $X_dGTydA31                   ) = '($X_sy31/($_alpha*$X_s31))*$X_dGTdA31*tanh(-1000*$X_vy31)' ! Definition

express.str (                       $X_dGTydA32                   ) = '($X_sy32/($_alpha*$X_s32))*$X_dGTdA32*tanh(-1000*$X_vy32)' ! Definition

express.str (                       $X_dGTydA33                   ) = '($X_sy33/($_alpha*$X_s33))*$X_dGTdA33*tanh(-1000*$X_vy33)' ! Definition

express.str (                       $X_dGTydA41                   ) = '($X_sy41/($_alpha*$X_s41))*$X_dGTdA41*tanh(-1000*$X_vy41)' ! Definition

express.str (                       $X_dGTydA42                   ) = '($X_sy42/($_alpha*$X_s42))*$X_dGTdA42*tanh(-1000*$X_vy42)' ! Definition

express.str (                       $X_dGTydA43                   ) = '($X_sy43/($_alpha*$X_s43))*$X_dGTdA43*tanh(-1000*$X_vy43)' ! Definition

express.str (                       $X_dGTydA51                   ) = '($X_sy51/($_alpha*$X_s51))*$X_dGTdA51*tanh(-1000*$X_vy51)' ! Definition

express.str (                       $X_dGTydA52                   ) = '($X_sy52/($_alpha*$X_s52))*$X_dGTdA52*tanh(-1000*$X_vy52)' ! Definition

express.str (                       $X_dGTydA53                   ) = '($X_sy53/($_alpha*$X_s53))*$X_dGTdA53*tanh(-1000*$X_vy53)' ! Definition

express.str (                       $X_GTx                        ) = '($_A/4)*(\n$_5gW1*($_3gW1*$X_dGTxdA11+$_3gW23*($X_dGTxdA12+$X_dGTxdA13))\n+\n$_5gW23*($_3gW1*($X_dGTxdA21+$X_dGTxdA31)+$_3gW23*($X_dGTxdA22+$X_dGTxdA23+$X_dGTxdA32+$X_dGTxdA33))\n+\n$_5gW45*($_3gW1*($X_dGTxdA41+$X_dGTxdA51)+$_3gW23*($X_dGTxdA42+$X_dGTxdA43+$X_dGTxdA52+$X_dGTxdA53))\n)\n' ! Definition

express.str (                       $X_GTy                        ) = '($_A/4)*(\n$_5gW1*($_3gW1*$X_dGTydA11+$_3gW23*($X_dGTydA12+$X_dGTydA13))\n+\n$_5gW23*($_3gW1*($X_dGTydA21+$X_dGTydA31)+$_3gW23*($X_dGTydA22+$X_dGTydA23+$X_dGTydA32+$X_dGTydA33))\n+\n$_5gW45*($_3gW1*($X_dGTydA41+$X_dGTydA51)+$_3gW23*($X_dGTydA42+$X_dGTydA43+$X_dGTydA52+$X_dGTydA53))\n)\n' ! Definition

express.str (                       $X_MGTxy                      ) = '($_A/4)*(\n(\n$_5gW23*$_5g23*($_3gW1*(-$X_dGTydA21+$X_dGTydA31)+$_3gW23*(-$X_dGTydA22-$X_dGTydA23+$X_dGTydA32+$X_dGTydA33))\n+\n$_5gW45*$_5g45*($_3gW1*(-$X_dGTydA41+$X_dGTydA51)+$_3gW23*(-$X_dGTydA42-$X_dGTydA43+$X_dGTydA52+$X_dGTydA53))\n)*$_TL/2\n-(\n$_5gW1*($_3gW23*(-$X_dGTxdA12+$X_dGTxdA13))\n+\n$_5gW23*($_3gW23*(-$X_dGTxdA22+$X_dGTxdA23-$X_dGTxdA32+$X_dGTxdA33))\n+\n$_5gW45*($_3gW23*(-$X_dGTxdA42+$X_dGTxdA43-$X_dGTxdA52+$X_dGTxdA53))\n)*$_3g23*$_TW/2\n)\n\n' ! Definition

express.str (                       $X_WGTyMx                     ) = '($_A/4)*(\n$_5gW1*($_3gW23*(-$X_dWdA12+$X_dWdA13))\n+\n$_5gW23*($_3gW23*(-$X_dWdA22+$X_dWdA23-$X_dWdA32+$X_dWdA33))\n+\n$_5gW45*($_3gW23*(-$X_dWdA42+$X_dWdA43-$X_dWdA52+$X_dWdA53))\n)*$_3g23*$_TW/2 + $X_GTy*$_r1' ! Definition

express.str (                       $X_MR                         ) = '$X_W*(2.5/($X_Bn*$X_DWI)+0.03/$X_DWI + 0.5*abs($X_sx)/sqrt($X_Bn))*tanh(1000*$X_vx)' ! Definition

express.str (                       $X_NT                         ) = '$X_GTx - $X_MR'        ! Definition

express.str (                       $X_My_roda1                   ) = '-$_r1*(-$X_GTx)'       ! Definition

express.str (                       $X_Fx                         ) = '-$X_NT'                ! Definition
express.txt (                       $X_Fx                         ) = '$X_GT*cos(beta($M_Base_BRF)) - $X_MR' ! Comment

express.str (                       $X_Fy                         ) = '-$X_GTy'               ! Definition

express.str (                       $X_Mx                         ) = '-$X_WGTyMx'            ! Definition

express.str (                       $X_Fz                         ) = '-$X_W'                 ! Definition
express.txt (                       $X_Fz                         ) = '- $X_GT*sin(beta($M_Base_BRF))' ! Comment

express.str (                       $X_My                         ) = '-$X_WMy'               ! Definition

express.str (                       $X_Mz                         ) = '-$X_MGTxy'             ! Definition

model.data.redundancy                                               = 'eJxjYBhcIC0xzSLR1Cg52TAt2SjZMtU4zcQ80cA8zdAsMcXU2CIJAKOXCYGwAAAAAAAAAA==' ! Constraint redundancy data
model.data.dependency                                               = 'eJxjY6AeYMSDGXCw0dWAQFpimkWiqVFysmFaslGyZapxmol5ooF5mqFZYoqpsUUSAKvnCZW0AAAAAAAAAA==' ! Solver state dependency data
