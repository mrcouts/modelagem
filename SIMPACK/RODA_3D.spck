!file.version=3.7! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20220002
version.desc   = ''
version.build  = 122

!**********************************************************************
!  Global parameters
!**********************************************************************
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 1                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 6.87122408096911386E-01 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -6.85232225584331900E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 1.69130044043413363E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = -6.12583339214324951E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = -3.11917681246995926E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = -2.46201269328594208E-03 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -7.89786517620086670E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.10030453652143478E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.10030450820922852E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.fix.type (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_TYPE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.fix.h (                   $SLV_SolverSettings           ) = 1.00000000000000002E-03 ! TIME_INTEG_TIMEPAR_CONSTANT_STEPSIZE
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 10 s }                ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force output values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_b                           ) = '0.400'                 ! Definition
subvar.dflt (                       $_b                           ) = ''                      ! Default value

subvar.str (                        $_TL                          ) = '0.258*5'               ! Definition
subvar.dflt (                       $_TL                          ) = ''                      ! Default value

subvar.str (                        $_d                           ) = '0.879'                 ! Definition
subvar.dflt (                       $_d                           ) = ''                      ! Default value

subvar.str (                        $_r                           ) = '$_d/2'                 ! Definition
subvar.dflt (                       $_r                           ) = ''                      ! Default value

subvar.str (                        $_CI                          ) = '1.8*10^6'              ! Definition
subvar.dflt (                       $_CI                          ) = ''                      ! Default value

subvar.str (                        $_ksolo                       ) = '5*10^6'                ! Definition
subvar.dflt (                       $_ksolo                       ) = ''                      ! Default value

subvar.str (                        $_cpneu                       ) = '10^6'                  ! Definition
subvar.dflt (                       $_cpneu                       ) = ''                      ! Default value

subvar.str (                        $_vmin                        ) = '10^(-8)'               ! Definition
subvar.dflt (                       $_vmin                        ) = ''                      ! Default value

subvar.str (                        $_3g23                        ) = 'sqrt(3/5)'             ! Definition
subvar.dflt (                       $_3g23                        ) = ''                      ! Default value
subvar.txt (                        $_3g23                        ) = '(1/3)*sqrt(5-2*sqrt(10/7))' ! Comment

subvar.str (                        $_rarb                        ) = '0.015'                 ! Definition
subvar.dflt (                       $_rarb                        ) = ''                      ! Default value
subvar.txt (                        $_rarb                        ) = ''                      ! Comment

subvar.str (                        $_3gW1                        ) = '8/9'                   ! Definition
subvar.dflt (                       $_3gW1                        ) = ''                      ! Default value
subvar.txt (                        $_3gW1                        ) = '128/225'               ! Comment

subvar.str (                        $_3gW23                       ) = '5/9'                   ! Definition
subvar.dflt (                       $_3gW23                       ) = ''                      ! Default value
subvar.txt (                        $_3gW23                       ) = '(322+13*sqrt(70))/900' ! Comment

subvar.str (                        $_m                           ) = '250+2*380.949+60.952'  ! Definition
subvar.dflt (                       $_m                           ) = ''                      ! Default value

subvar.str (                        $_alpha                       ) = '2'                     ! Definition
subvar.dflt (                       $_alpha                       ) = ''                      ! Default value

subvar.str (                        $_kpneu                       ) = '1.12e7'                ! Definition
subvar.dflt (                       $_kpneu                       ) = ''                      ! Default value

subvar.str (                        $_h                           ) = '0.55*$_b'              ! Definition
subvar.dflt (                       $_h                           ) = ''                      ! Default value

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -1.60000000000000000E+02
refsys.attr.2d.pos.y (              $R_Isys                       ) = -6.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.70000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 6.30000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_Base                       ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Base                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.cg.pos (             1 ,       $B_Base                       ) = 0.00000000000000000E+00 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Base                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Base                       ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Base                       ) = -4.00000000000000000E+01
body.attr.2d.pos.y (                $B_Base                       ) = 2.80000000000000000E+02
body.attr.2d.width (                $B_Base                       ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Base                       ) = 4.00000000000000000E+01

marker.type (                       $M_Base_BRF                   ) = 1                       ! Type
marker.parent (                     $M_Base_BRF                   ) = $B_Base                 ! Body
marker.flx.type (                   $M_Base_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_Base_contact1              ) = -87                     ! Type
marker.parent (                     $M_Base_contact1              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact1              ) = -6.28318531096444044E+00 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact1              ) = 1.48823885932579247E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact1              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact1              ) = $P_C1                   ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact1              ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact1              ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact1              ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact2              ) = -87                     ! Type
marker.parent (                     $M_Base_contact2              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact2              ) = -6.28318530917277762E+00 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact2              ) = 1.48814235191862854E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact2              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact2              ) = $P_C2                   ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact2              ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact2              ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact2              ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact3              ) = -87                     ! Type
marker.parent (                     $M_Base_contact3              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact3              ) = -4.55158202356299572E-09 ! Algebraic states
marker.st.alg (           2 ,       $M_Base_contact3              ) = 1.48886239529909314E+00 ! Algebraic states
marker.par (              1 ,       $M_Base_contact3              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact3              ) = $P_C3                   ! [-] Contact geometry Primitive
marker.par (              4 ,       $M_Base_contact3              ) = 1.00000000000000000E+00 ! [-] Normal orientation
marker.par (              6 ,       $M_Base_contact3              ) = 1.00000000000000000E+00 ! [-] Contact point determin. method
marker.par (              7 ,       $M_Base_contact3              ) = 9.99999999999999955E-08 ! [-] Solver tolerance

marker.type (                       $M_Base_contact11             ) = 2                       ! Type
marker.ref (                        $M_Base_contact11             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact11             ) = $B_Base                 ! Body
marker.pos (              3 ,       $M_Base_contact11             ) = { -$_r }                ! Position

marker.type (                       $M_Base_contact21             ) = 2                       ! Type
marker.ref (                        $M_Base_contact21             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact21             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact21             ) = { -$_3g23*$_TL/2 }      ! Position
marker.pos (              3 ,       $M_Base_contact21             ) = { -$_r }                ! Position

marker.type (                       $M_Base_contact31             ) = 2                       ! Type
marker.ref (                        $M_Base_contact31             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact31             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact31             ) = { $_3g23*$_TL/2 }       ! Position
marker.pos (              3 ,       $M_Base_contact31             ) = { -$_r }                ! Position

joint.from (                        $J_Base                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_Base                       ) = $M_Base_BRF             ! To Marker
joint.type (                        $J_Base                       ) = 25                      ! Type
joint.st.pos (            1 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_Base                       ) = -2.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_Base                       ) = { 1.3*$_r }             ! Position
joint.st.pos (            6 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_Base                       ) = 5.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.par (               1 ,       $J_Base                       ) = 2.00000000000000000E+00 ! [-] Axis of rotation    1
joint.par (               2 ,       $J_Base                       ) = 3.00000000000000000E+00 ! [-] Axis of rotation    2
joint.par (               3 ,       $J_Base                       ) = 1.00000000000000000E+00 ! [-] Axis of rotation    3
joint.par (               4 ,       $J_Base                       ) = 1.00000000000000000E+00 ! [-] Axis of translation 1
joint.par (               5 ,       $J_Base                       ) = 3.00000000000000000E+00 ! [-] Axis of translation 2
joint.par (               6 ,       $J_Base                       ) = 2.00000000000000000E+00 ! [-] Axis of translation 3
joint.par (               8 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Trans-rot sequence
joint.attr.2d.pos.x (     1 ,       $J_Base                       ) = -20
joint.attr.2d.pos.y (     1 ,       $J_Base                       ) = 190
joint.attr.2d.ori (       1 ,       $J_Base                       ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 20, -42.5, -42.5, -20, -20, -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 0, 0, 143, 143, 153, 163, 173
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Base        ) = -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Base        ) = 280, 207

prim.type (                         $P_C1                         ) = 15                      ! Type
prim.ref (                          $P_C1                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                3 ,       $P_C1                         ) = { -$_r }                ! Position
prim.color.r (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C1                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C1                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C1                         ) = 5.00000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_C1                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C1                         ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C1                         ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C2                         ) = 15                      ! Type
prim.ref (                          $P_C2                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C2                         ) = { -$_3g23*$_TL/2 }      ! Position
prim.pos (                3 ,       $P_C2                         ) = { -$_r }                ! Position
prim.color.r (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C2                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C2                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C2                         ) = 5.00000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_C2                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C2                         ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C2                         ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_C3                         ) = 15                      ! Type
prim.ref (                          $P_C3                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C3                         ) = { $_3g23*$_TL/2 }       ! Position
prim.pos (                3 ,       $P_C3                         ) = { -$_r }                ! Position
prim.color.r (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C3                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C3                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C3                         ) = 5.00000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_C3                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C3                         ) = $_rarb                  ! [m] Radius
prim.par (                3 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (                4 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (                5 ,       $P_C3                         ) = 2.40000000000000000E+01 ! [-] Number of meridians

prim.type (                         $P_Base_Base                  ) = 1                       ! Type
prim.ref (                          $P_Base_Base                  ) = $M_Base_BRF             ! Reference Marker
prim.color.r (            1 ,       $P_Base_Base                  ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Base_Base                  ) = 1.85000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Base_Base                  ) = 1.50000000000000000E+01 ! Colors (blue component)
prim.color.t (            1 ,       $P_Base_Base                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_Base_Base                  ) = 9.00000000000000022E-01 ! Transparency
prim.par (                2 ,       $P_Base_Base                  ) = $_TL                    ! [m] Length in X
prim.par (                3 ,       $P_Base_Base                  ) = $_b                     ! [m] Length in Y
prim.par (                4 ,       $P_Base_Base                  ) = { 2*$_r }               ! [m] Length in Z


body.m (                            $B_Roda1                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda1                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda1                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda1                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda1                      ) = 3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda1                      ) = 1.40000000000000000E+02
body.attr.2d.width (                $B_Roda1                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda1                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda1_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda1_BRF                  ) = $B_Roda1                ! Body
marker.flx.type (                   $M_Roda1_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda1                      ) = $M_Base_BRF             ! From Marker
joint.to (                          $J_Roda1                      ) = $M_Roda1_BRF            ! To Marker
joint.type (                        $J_Roda1                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda1                      ) = 30
joint.attr.2d.pos.y (     1 ,       $J_Roda1                      ) = 220
joint.attr.2d.ori (       1 ,       $J_Roda1                      ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 10, 10, 30, 30
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 280, 261.75, 261.75, 237
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 40, 40, 30, 30
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 180, 190, 190, 203

prim.type (                         $P_Roda1_pneu                 ) = 39                      ! Type
prim.ref (                          $P_Roda1_pneu                 ) = $M_Roda1_BRF            ! Reference Marker
prim.pos (                1 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! Angles
prim.ang (                2 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! Angles
prim.ang (                3 ,       $P_Roda1_pneu                 ) = { 180 deg }             ! Angles
prim.color.r (            1 ,       $P_Roda1_pneu                 ) = 5.20000000000000000E+01 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda1_pneu                 ) = 5.20000000000000000E+01 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda1_pneu                 ) = 5.20000000000000000E+01 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda1_pneu                 ) = 1.10000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda1_pneu                 ) = './pecas_stl/pneu.stl'  ! [-] CAD file name
prim.par (                9 ,       $P_Roda1_pneu                 ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda1_pneu                 ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda1_pneu                 ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation

prim.type (                         $P_Roda1_aro                  ) = 39                      ! Type
prim.ref (                          $P_Roda1_aro                  ) = $M_Roda1_BRF            ! Reference Marker
prim.pos (                1 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_Roda1_aro                  ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_Roda1_aro                  ) = { 90 deg }              ! Angles
prim.ang (                3 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! Angles
prim.color.r (            1 ,       $P_Roda1_aro                  ) = 1.88000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda1_aro                  ) = 1.88000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda1_aro                  ) = 1.88000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_Roda1_aro                  ) = './pecas_stl/aro.stl'   ! [-] CAD file name
prim.par (                9 ,       $P_Roda1_aro                  ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Roda1_aro                  ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Roda1_aro                  ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_connector                  ) = 1.00000000000000006E-09 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_connector                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_connector                  ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_connector                  ) = 2.00000000000000000E+01
body.attr.2d.pos.y (                $B_connector                  ) = -2.00000000000000000E+01
body.attr.2d.width (                $B_connector                  ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_connector                  ) = 3.00000000000000000E+01

marker.type (                       $M_connector_BRF              ) = 1                       ! Type
marker.parent (                     $M_connector_BRF              ) = $B_connector            ! Body
marker.flx.type (                   $M_connector_BRF              ) = 4                       ! Flexible type

joint.from (                        $J_connector                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_connector                  ) = $M_connector_BRF        ! To Marker
joint.type (                        $J_connector                  ) = 0                       ! Type
joint.par (               1 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_connector                  ) = -20
joint.attr.2d.pos.y (     1 ,       $J_connector                  ) = -20
joint.attr.2d.ori (       1 ,       $J_connector                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_connector ) = -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_connector ) = -60, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 50, 50, -20, -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 10, 19.75, 19.75, 7, -3


body.m (                            $B_chao                       ) = 1.00000000000000004E-10 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_chao                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_chao                       ) = 0.00000000000000000E+00 ! Damping input value

marker.type (                       $M_chao_BRF                   ) = 1                       ! Type
marker.parent (                     $M_chao_BRF                   ) = $B_chao                 ! Body
marker.flx.type (                   $M_chao_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_chao_contact1              ) = -87                     ! Type
marker.parent (                     $M_chao_contact1              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact1              ) = -1.99383631075779033E+00 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact1              ) = -2.82896093970081660E-10 ! Algebraic states
marker.par (              1 ,       $M_chao_contact1              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact1              ) = $M_Base_contact1        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact1              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact2              ) = -87                     ! Type
marker.parent (                     $M_chao_contact2              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact2              ) = -2.03251663002647787E+00 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact2              ) = -1.50001425058544420E-10 ! Algebraic states
marker.par (              1 ,       $M_chao_contact2              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact2              ) = $M_Base_contact2        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact2              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact3              ) = -87                     ! Type
marker.parent (                     $M_chao_contact3              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact3              ) = -1.95541333897847647E+00 ! Algebraic states
marker.st.alg (           2 ,       $M_chao_contact3              ) = -3.25721960921084878E-10 ! Algebraic states
marker.par (              1 ,       $M_chao_contact3              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact3              ) = $M_Base_contact3        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact3              ) = $P_chao                 ! [-] Contact geometry Primitive

joint.from (                        $J_chao                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_chao                       ) = $M_chao_BRF             ! To Marker
joint.type (                        $J_chao                       ) = 0                       ! Type
joint.par (               1 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_chao                       ) = 43                      ! Type
prim.ref (                          $P_chao                       ) = $M_chao_BRF             ! Reference Marker
prim.ang (                1 ,       $P_chao                       ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   1 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   2 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   3 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   4 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   5 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   6 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   7 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   8 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   9 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  10 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  11 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  12 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  14 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  15 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  16 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  17 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  18 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  19 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  20 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  21 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  22 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  23 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  24 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  25 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   1 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   2 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   4 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   5 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   6 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   7 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   8 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   9 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  10 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  11 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  12 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  14 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  15 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  16 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  17 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  18 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  19 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  20 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  21 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  22 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  23 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  24 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  25 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   1 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   2 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   4 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   5 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   6 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   7 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   8 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,   9 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  10 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  11 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  12 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  13 , $P_chao                       ) = 1.00000000000000006E-01 ! Vertices
prim.vtx (                3 ,  14 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  15 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  16 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  17 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  18 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  19 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  20 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  21 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  22 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  23 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  24 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                3 ,  25 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.color.r (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_chao                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_chao                       ) = 0.00000000000000000E+00 ! Transparency
prim.par (                2 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Surface by
prim.par (                7 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Coordinate type
prim.par (                8 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Surface fitting type
prim.par (                9 ,       $P_chao                       ) = 3.00000000000000000E+00 ! [-] Spline degree in 1st dir
prim.par (               10 ,       $P_chao                       ) = 3.00000000000000000E+00 ! [-] Spline degree in 2nd dir
prim.par (               17 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] No. graphic points in 1st dir
prim.par (               18 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] No. graphic points in 2nd dir
prim.par (               19 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics start 1st dir
prim.par (               20 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics end 1st dir
prim.par (               21 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics start 2nd dir
prim.par (               22 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics end 2nd dir
prim.plot.par (           1 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   1 , $P_chao                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   2 , $P_chao                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 , $P_chao                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   1 , $P_chao                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   2 , $P_chao                 ) = 2.56000000000000000E+02 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   3 , $P_chao                 ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   4 , $P_chao                 ) = 2.56000000000000000E+02 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   5 , $P_chao                 ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   7 , $P_chao                 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   3 ,   8 , $P_chao                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   4 , $P_chao                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   4 ,   1 , $P_chao                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   4 ,   2 , $P_chao                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   4 ,   3 , $P_chao                 ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
prim.plot.par (           1 ,   5 ,   1 , $P_chao                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

prim.type (                         $P_chao_prisma                ) = 5                       ! Type
prim.ref (                          $P_chao_prisma                ) = $M_chao_BRF             ! Reference Marker
prim.ang (                1 ,       $P_chao_prisma                ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   1 , $P_chao_prisma                ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   2 , $P_chao_prisma                ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   3 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   4 , $P_chao_prisma                ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   5 , $P_chao_prisma                ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   6 , $P_chao_prisma                ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   7 , $P_chao_prisma                ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   8 , $P_chao_prisma                ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   9 , $P_chao_prisma                ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  10 , $P_chao_prisma                ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  11 , $P_chao_prisma                ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  12 , $P_chao_prisma                ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  13 , $P_chao_prisma                ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  14 , $P_chao_prisma                ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  15 , $P_chao_prisma                ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  16 , $P_chao_prisma                ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  17 , $P_chao_prisma                ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  18 , $P_chao_prisma                ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  19 , $P_chao_prisma                ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  20 , $P_chao_prisma                ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  21 , $P_chao_prisma                ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  22 , $P_chao_prisma                ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  23 , $P_chao_prisma                ) = 2.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  24 , $P_chao_prisma                ) = 2.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  25 , $P_chao_prisma                ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  26 , $P_chao_prisma                ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  27 , $P_chao_prisma                ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  28 , $P_chao_prisma                ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  29 , $P_chao_prisma                ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  30 , $P_chao_prisma                ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  31 , $P_chao_prisma                ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  32 , $P_chao_prisma                ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  33 , $P_chao_prisma                ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  34 , $P_chao_prisma                ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  35 , $P_chao_prisma                ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  36 , $P_chao_prisma                ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  37 , $P_chao_prisma                ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  38 , $P_chao_prisma                ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  39 , $P_chao_prisma                ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  40 , $P_chao_prisma                ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  41 , $P_chao_prisma                ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  42 , $P_chao_prisma                ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  43 , $P_chao_prisma                ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  44 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  45 , $P_chao_prisma                ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  46 , $P_chao_prisma                ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   1 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   2 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   3 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   4 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   5 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   6 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   7 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   8 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   9 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  10 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  11 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  12 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  13 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  14 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  15 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  16 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  17 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  18 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  19 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  20 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  21 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  22 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  23 , $P_chao_prisma                ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  24 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  25 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  26 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  27 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  28 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  29 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  30 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  31 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  32 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  33 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  34 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  35 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  36 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  37 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  38 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  39 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  40 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  41 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  42 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  43 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  44 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  45 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  46 , $P_chao_prisma                ) = -5.00000000000000000E-01 ! Vertices
prim.color.r (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_chao_prisma                ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_chao_prisma                ) = 1.00000000000000000E+00 ! Transparency
prim.par (                2 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Contour by
prim.par (                4 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Contour
prim.par (                6 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Curve fitting type
prim.par (                7 ,       $P_chao_prisma                ) = 3.00000000000000000E+00 ! [-] Spline Degree
prim.par (                9 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Material side
prim.par (               10 ,       $P_chao_prisma                ) = 4.00000000000000000E+00 ! [m] Depth
prim.par (               11 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [m] Wall thickness
prim.par (               12 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (               13 ,       $P_chao_prisma                ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (               14 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [m] Graphics discretization sag
prim.par (               15 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [rad] Graphics discretization angle
prim.par (               17 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Graphics start
prim.par (               18 ,       $P_chao_prisma                ) = 0.00000000000000000E+00 ! [-] Graphics end


!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_1                          ) = 50                      ! Type
force.from (                        $F_1                          ) = $M_connector_BRF        ! From Marker
force.to (                          $F_1                          ) = $M_Roda1_BRF            ! To Marker
force.disabled (                    $F_1                          ) = 0                       ! Disabled
force.par (               1 ,       $F_1                          ) = $M_Roda1_BRF            ! [-] Reference Marker for calc.
force.par (               3 ,       $F_1                          ) = null                    ! [-] Expression for Fx
force.par (               4 ,       $F_1                          ) = null                    ! [-] Expression for Fy
force.par (               5 ,       $F_1                          ) = null                    ! [-] Expression for Fz
force.par (               6 ,       $F_1                          ) = null                    ! [-] Expression for Lx
force.par (               7 ,       $F_1                          ) = $X_My_roda1             ! [-] Expression for Ly
force.par (               8 ,       $F_1                          ) = null                    ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_1                          ) = 10
force.attr.2d.pos.y (     1 ,       $F_1                          ) = 50
force.attr.2d.ori (       1 ,       $F_1                          ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_1         ) = 40, 40, 10, 10
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_1         ) = 10, 20, 20, 33
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_1           ) = 30, 10, 10
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_1           ) = 150, 150, 67

force.type (                        $F_base                       ) = 50                      ! Type
force.from (                        $F_base                       ) = $M_chao_contact1        ! From Marker
force.to (                          $F_base                       ) = $M_Base_BRF             ! To Marker
force.disabled (                    $F_base                       ) = 0                       ! Disabled
force.par (               1 ,       $F_base                       ) = $M_Base_BRF             ! [-] Reference Marker for calc.
force.par (               3 ,       $F_base                       ) = $X_Fx                   ! [-] Expression for Fx
force.par (               4 ,       $F_base                       ) = $X_Fy                   ! [-] Expression for Fy
force.par (               5 ,       $F_base                       ) = $X_Fz                   ! [-] Expression for Fz
force.par (               6 ,       $F_base                       ) = $X_Mx                   ! [-] Expression for Lx
force.par (               7 ,       $F_base                       ) = $X_My                   ! [-] Expression for Ly
force.par (               8 ,       $F_base                       ) = $X_Mz                   ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_base                       ) = -20
force.attr.2d.pos.y (     1 ,       $F_base                       ) = 120
force.attr.2d.ori (       1 ,       $F_base                       ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_base      ) = 30, 30, -20, -20, -20
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_base      ) = 10, 25.1875, 25.1875, 40.75, 103
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_base        ) = 0, 0, -10, -20, -20
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_base        ) = 280, 172.75, 172.75, 172.75, 137

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_wy                         ) = 'WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vx11                       ) = 'VX($M_Base_contact11,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vy11                       ) = 'VY($M_Base_contact11,$M_connector_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_vrel11                     ) = '$X_vx11 - $_r*$X_wy'   ! Definition

express.str (                       $X_vsref11                    ) = 'max(abs($X_vx11) , $_r*abs($X_wy))' ! Definition

express.str (                       $X_sx11                       ) = 'IF($X_vsref11 > 0)\n{\nabs(-$X_vrel11/$X_vsref11)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_sy11                       ) = 'IF($X_vsref11 > 0)\n{\nabs($X_vy11/$X_vsref11)\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_s11                        ) = 'sqrt($X_sx11^2 + ($X_sy11/$_alpha)^2)' ! Definition

express.str (                       $X_dist_borda11               ) = 'DZ($M_Base_contact11,$M_chao_contact1,$M_Base_contact11)' ! Definition
express.txt (                       $X_dist_borda11               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda21               ) = 'DZ($M_Base_contact21,$M_chao_contact2,$M_Base_contact21)' ! Definition
express.txt (                       $X_dist_borda21               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda31               ) = 'DZ($M_Base_contact31,$M_chao_contact3,$M_Base_contact31)' ! Definition
express.txt (                       $X_dist_borda31               ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $dX_dist_borda11              ) = 'VZ($M_Base_contact11,$M_chao_contact1,$M_Base_contact11)' ! Definition
express.txt (                       $dX_dist_borda11              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda21              ) = 'VZ($M_Base_contact21,$M_chao_contact2,$M_Base_contact21)' ! Definition
express.txt (                       $dX_dist_borda21              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda31              ) = 'VZ($M_Base_contact31,$M_chao_contact3,$M_Base_contact31)' ! Definition
express.txt (                       $dX_dist_borda31              ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $X_delta11                    ) = 'IF($X_dist_borda11 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$X_dist_borda11\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta21                    ) = 'IF($X_dist_borda21 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$X_dist_borda21\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta31                    ) = 'IF($X_dist_borda31 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$X_dist_borda31\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta11                   ) = 'IF($X_dist_borda11 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$dX_dist_borda11\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta21                   ) = 'IF($X_dist_borda21 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$dX_dist_borda21\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta31                   ) = 'IF($X_dist_borda31 < 0)\n{\n-($_ksolo/($_ksolo+$_kpneu))*$dX_dist_borda31\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_dWdA11                     ) = '$_kpneu*$X_delta11 + $_cpneu*$dX_delta11' ! Definition

express.str (                       $X_dWdA21                     ) = '$_kpneu*$X_delta21 + $_cpneu*$dX_delta21' ! Definition

express.str (                       $X_dWdA31                     ) = '$_kpneu*$X_delta31 + $_cpneu*$dX_delta31' ! Definition

express.str (                       $X_W                          ) = '$X_A*$X_dWdA11'        ! Definition
express.txt (                       $X_W                          ) = '($X_A/2)*([br]$_3gW1*($X_dWdA11)[br]+[br]$_3gW23*($X_dWdA21+$X_dWdA31)[br])[br]' ! Comment

express.str (                       $X_W2                         ) = 'IF(abs($X_W) > 0.1)\n{\nabs($X_W)\n}\nELSE\n{\n0.1\n}' ! Definition

express.str (                       $X_WMy                        ) = '-($X_A/2)*(\n$_3gW23*$_3g23*(-$X_dWdA21+$X_dWdA31)\n)*$_TL/2\n' ! Definition
express.txt (                       $X_WMy                        ) = '($_A/4)*([br]$_5gW1*($_3gW1*$X_dWdA11+$_3gW23*($X_dWdA12+$X_dWdA13))[br]+[br]$_5gW23*($_3gW1*($X_dWdA21+$X_dWdA31)+$_3gW23*($X_dWdA22+$X_dWdA23+$X_dWdA32+$X_dWdA33))[br]+[br]$_5gW45*($_3gW1*($X_dWdA41+$X_dWdA51)+$_3gW23*($X_dWdA42+$X_dWdA43+$X_dWdA52+$X_dWdA53))[br])[br][br]' ! Comment

express.str (                       $X_Bn                         ) = '($_CI*$_d*$_b/($X_W2))*(1+5*$X_delta11/$_h)/(1+6*($_b/$_d))' ! Definition

express.str (                       $X_DWR                        ) = '1+(-$X_WMy/$X_W2)/$_TL' ! Definition

express.str (                       $X_DWI                        ) = '1-abs(0.7*($X_DWR-1)/($X_DWR+1))' ! Definition

express.str (                       $X_GTR11                      ) = '($X_mu - 0.04)*(1-exp(-7.5*$X_s11))+0.04' ! Definition

express.str (                       $X_dGTdA11                    ) = '$X_dWdA11*$X_GTR11'    ! Definition

express.str (                       $X_dGTxdA11                   ) = '($X_sx11/$X_s11)*$X_dGTdA11*tanh(-1000*$X_vrel11)' ! Definition

express.str (                       $X_dGTydA11                   ) = '($X_sy11/($_alpha*$X_s11))*$X_dGTdA11*tanh(-1000*$X_vy11)' ! Definition

express.str (                       $X_GTx                        ) = '$X_A*$X_dGTxdA11'      ! Definition
express.txt (                       $X_GTx                        ) = '($X_A/2)*([br]$_3gW1*($X_dGTxdA11)[br]+[br]$_3gW23*($X_dGTxdA21+$X_dGTxdA31)[br])[br][br]' ! Comment

express.str (                       $X_GTy                        ) = '$X_A*$X_dGTydA11\n\n'  ! Definition
express.txt (                       $X_GTy                        ) = '($_A/4)*([br]$_5gW1*($_3gW1*$X_dGTydA11+$_3gW23*($X_dGTydA12+$X_dGTydA13))[br]+[br]$_5gW23*($_3gW1*($X_dGTydA21+$X_dGTydA31)+$_3gW23*($X_dGTydA22+$X_dGTydA23+$X_dGTydA32+$X_dGTydA33))[br]+[br]$_5gW45*($_3gW1*($X_dGTydA41+$X_dGTydA51)+$_3gW23*($X_dGTydA42+$X_dGTydA43+$X_dGTydA52+$X_dGTydA53))[br])[br][br]' ! Comment

express.str (                       $X_MGTxy                      ) = '0\n'                   ! Definition
express.txt (                       $X_MGTxy                      ) = '($X_A/2)*([br]([br]$_3gW23*$_3g23*(-$X_dGTydA21+$X_dGTydA31)[br])*$_TL/2[br])' ! Comment

express.str (                       $X_WGTyMx                     ) = '$X_GTy*($_r-$X_delta11)' ! Definition
express.txt (                       $X_WGTyMx                     ) = '($_A/4)*([br]$_5gW1*($_3gW23*(-$X_dWdA12+$X_dWdA13))[br]+[br]$_5gW23*($_3gW23*(-$X_dWdA22+$X_dWdA23-$X_dWdA32+$X_dWdA33))[br]+[br]$_5gW45*($_3gW23*(-$X_dWdA42+$X_dWdA43-$X_dWdA52+$X_dWdA53))[br])*$_3g23*$_TW/2 + $X_GTy*$_r1' ! Comment

express.str (                       $X_MR                         ) = '$X_W*(1.0/($X_Bn)+0.04 + 0.5*$X_sx11/sqrt($X_Bn))*tanh(1000*$X_vx11)' ! Definition

express.str (                       $X_NT                         ) = '$X_GTx - $X_MR'        ! Definition

express.str (                       $X_My_roda1                   ) = '-($_r-$X_delta11)*(-$X_GTx)' ! Definition

express.str (                       $X_Fx                         ) = '-$X_NT'                ! Definition
express.txt (                       $X_Fx                         ) = '$X_GT*cos(beta($M_Base_BRF)) - $X_MR' ! Comment

express.str (                       $X_Fy                         ) = '-$X_GTy'               ! Definition

express.str (                       $X_Mx                         ) = '-$X_WGTyMx'            ! Definition

express.str (                       $X_Fz                         ) = '-$X_W'                 ! Definition
express.txt (                       $X_Fz                         ) = '- $X_GT*sin(beta($M_Base_BRF))' ! Comment

express.str (                       $X_My                         ) = '-$X_WMy'               ! Definition

express.str (                       $X_Mz                         ) = '-$X_MGTxy'             ! Definition

express.str (                       $X_mu                         ) = '0.88*(1-exp(-0.1*$X_Bn)) + 0.04' ! Definition

express.str (                       $X_a                          ) = 'sqrt(max($X_delta11*($_d-$X_delta11),0))' ! Definition

express.str (                       $X_A                          ) = '(pi/4)*2*$_b*$X_a'     ! Definition

                                                                                                                                                                       
