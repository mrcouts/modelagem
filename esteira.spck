!file.version=3.7! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20220002
version.desc   = ''
version.build  = 122

!**********************************************************************
!  Global parameters
!**********************************************************************
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 1                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 4.55744957923889160E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -1.13348903656005859E+01 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 1.52376401424407959E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = -7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = -0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -7.07106769084930420E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 3.18491496145725250E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 3.18491477966308594E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 2 s }                 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force output values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_TW                          ) = '0.250'                 ! Definition
subvar.dflt (                       $_TW                          ) = ''                      ! Default value

subvar.str (                        $_TL                          ) = '1.0'                   ! Definition
subvar.dflt (                       $_TL                          ) = ''                      ! Default value

subvar.str (                        $_d1                          ) = '0.5'                   ! Definition
subvar.dflt (                       $_d1                          ) = ''                      ! Default value

subvar.str (                        $_r1                          ) = '$_d1/2'                ! Definition
subvar.dflt (                       $_r1                          ) = ''                      ! Default value

subvar.str (                        $_d2                          ) = '0.200'                 ! Definition
subvar.dflt (                       $_d2                          ) = ''                      ! Default value

subvar.str (                        $_r2                          ) = '$_d2/2'                ! Definition
subvar.dflt (                       $_r2                          ) = ''                      ! Default value

subvar.str (                        $_d                           ) = '0.125'                 ! Definition
subvar.dflt (                       $_d                           ) = ''                      ! Default value

subvar.str (                        $_CI                          ) = '1.8*10^6'              ! Definition
subvar.dflt (                       $_CI                          ) = ''                      ! Default value

subvar.str (                        $_ksolo                       ) = '5*10^6'                ! Definition
subvar.dflt (                       $_ksolo                       ) = ''                      ! Default value

subvar.str (                        $_A                           ) = '$_TL*$_TW'             ! Definition
subvar.dflt (                       $_A                           ) = ''                      ! Default value

subvar.str (                        $_c_solo                      ) = '10^6'                  ! Definition
subvar.dflt (                       $_c_solo                      ) = ''                      ! Default value

subvar.str (                        $_vmin                        ) = '10^(-8)'               ! Definition
subvar.dflt (                       $_vmin                        ) = ''                      ! Default value

subvar.str (                        $_gauss23                     ) = '(1/3)*sqrt(5-2*sqrt(10/7))' ! Definition
subvar.dflt (                       $_gauss23                     ) = ''                      ! Default value

subvar.str (                        $_gauss45                     ) = '(1/3)*sqrt(5+2*sqrt(10/7))' ! Definition
subvar.dflt (                       $_gauss45                     ) = ''                      ! Default value

subvar.str (                        $_rarb                        ) = '0.1'                   ! Definition
subvar.dflt (                       $_rarb                        ) = ''                      ! Default value

subvar.str (                        $_gaussW1                     ) = '128/225'               ! Definition
subvar.dflt (                       $_gaussW1                     ) = ''                      ! Default value

subvar.str (                        $_gaussW23                    ) = '(322+13*sqrt(70))/900' ! Definition
subvar.dflt (                       $_gaussW23                    ) = ''                      ! Default value

subvar.str (                        $_gaussW45                    ) = '(322-13*sqrt(70))/900' ! Definition
subvar.dflt (                       $_gaussW45                    ) = ''                      ! Default value

subvar.str (                        $_m                           ) = '250+2*380.949+60.952'  ! Definition
subvar.dflt (                       $_m                           ) = ''                      ! Default value

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -1.60000000000000000E+02
refsys.attr.2d.pos.y (              $R_Isys                       ) = -6.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.70000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 6.30000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_Base                       ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Base                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.cg.pos (             1 ,       $B_Base                       ) = 0.00000000000000000E+00 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Base                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Base                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Base                       ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Base                       ) = -4.00000000000000000E+01
body.attr.2d.pos.y (                $B_Base                       ) = 2.80000000000000000E+02
body.attr.2d.width (                $B_Base                       ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Base                       ) = 4.00000000000000000E+01

marker.type (                       $M_Base_BRF                   ) = 1                       ! Type
marker.parent (                     $M_Base_BRF                   ) = $B_Base                 ! Body
marker.flx.type (                   $M_Base_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_Base_Roda1c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda1c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda1c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda1c                ) = { $_TL/2 }              ! Position

marker.type (                       $M_Base_Roda2c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda2c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda2c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda2c                ) = $_d                     ! Position
marker.pos (              2 ,       $M_Base_Roda2c                ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Base_Roda2c                ) = { $_r2-$_r1 }           ! Position

marker.type (                       $M_Base_Roda3c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda3c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda3c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda3c                ) = { -$_d }                ! Position
marker.pos (              2 ,       $M_Base_Roda3c                ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Base_Roda3c                ) = { $_r2-$_r1 }           ! Position

marker.type (                       $M_Base_Roda4c                ) = 2                       ! Type
marker.ref (                        $M_Base_Roda4c                ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_Roda4c                ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_Roda4c                ) = { -$_TL/2 }             ! Position

marker.type (                       $M_Base_contact1              ) = -96                     ! Type
marker.parent (                     $M_Base_contact1              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact1              ) = 3.19773029419741450E-01 ! Algebraic states
marker.par (              1 ,       $M_Base_contact1              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact1              ) = $P_C1                   ! [-] Contact geometry Primitive
marker.par (              5 ,       $M_Base_contact1              ) = 0.00000000000000000E+00 ! [-] Contact point determin. method

marker.type (                       $M_Base_contact2              ) = -96                     ! Type
marker.parent (                     $M_Base_contact2              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact2              ) = 3.16219582859817216E-01 ! Algebraic states
marker.par (              1 ,       $M_Base_contact2              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact2              ) = $P_C2                   ! [-] Contact geometry Primitive
marker.par (              5 ,       $M_Base_contact2              ) = 0.00000000000000000E+00 ! [-] Contact point determin. method

marker.type (                       $M_Base_contact3              ) = -96                     ! Type
marker.parent (                     $M_Base_contact3              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact3              ) = 3.23359439700231399E-01 ! Algebraic states
marker.par (              1 ,       $M_Base_contact3              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact3              ) = $P_C3                   ! [-] Contact geometry Primitive
marker.par (              5 ,       $M_Base_contact3              ) = 0.00000000000000000E+00 ! [-] Contact point determin. method

marker.type (                       $M_Base_contact4              ) = -96                     ! Type
marker.parent (                     $M_Base_contact4              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact4              ) = 3.17559033192955253E-01 ! Algebraic states
marker.par (              1 ,       $M_Base_contact4              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact4              ) = $P_C4                   ! [-] Contact geometry Primitive
marker.par (              5 ,       $M_Base_contact4              ) = 0.00000000000000000E+00 ! [-] Contact point determin. method

marker.type (                       $M_Base_contact5              ) = -96                     ! Type
marker.parent (                     $M_Base_contact5              ) = $B_Base                 ! Body
marker.st.alg (           1 ,       $M_Base_contact5              ) = 3.24978799715098354E-01 ! Algebraic states
marker.par (              1 ,       $M_Base_contact5              ) = 0.00000000000000000E+00 ! [-] Marker type
marker.par (              3 ,       $M_Base_contact5              ) = $P_C5                   ! [-] Contact geometry Primitive
marker.par (              5 ,       $M_Base_contact5              ) = 0.00000000000000000E+00 ! [-] Contact point determin. method

marker.type (                       $M_Base_contact11             ) = 2                       ! Type
marker.ref (                        $M_Base_contact11             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact11             ) = $B_Base                 ! Body
marker.pos (              3 ,       $M_Base_contact11             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact12             ) = 2                       ! Type
marker.ref (                        $M_Base_contact12             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact12             ) = $B_Base                 ! Body
marker.pos (              2 ,       $M_Base_contact12             ) = { -sqrt(3/5)*$_TW/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact12             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact13             ) = 2                       ! Type
marker.ref (                        $M_Base_contact13             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact13             ) = $B_Base                 ! Body
marker.pos (              2 ,       $M_Base_contact13             ) = { sqrt(3/5)*$_TW/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact13             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact21             ) = 2                       ! Type
marker.ref (                        $M_Base_contact21             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact21             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact21             ) = { -$_gauss23*$_TL/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact21             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact22             ) = 2                       ! Type
marker.ref (                        $M_Base_contact22             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact22             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact22             ) = { -$_gauss23*$_TL/2 }   ! Position
marker.pos (              2 ,       $M_Base_contact22             ) = { -sqrt(3/5)*$_TW/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact22             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact23             ) = 2                       ! Type
marker.ref (                        $M_Base_contact23             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact23             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact23             ) = { -$_gauss23*$_TL/2 }   ! Position
marker.pos (              2 ,       $M_Base_contact23             ) = { sqrt(3/5)*$_TW/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact23             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact31             ) = 2                       ! Type
marker.ref (                        $M_Base_contact31             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact31             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact31             ) = { $_gauss23*$_TL/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact31             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact32             ) = 2                       ! Type
marker.ref (                        $M_Base_contact32             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact32             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact32             ) = { $_gauss23*$_TL/2 }    ! Position
marker.pos (              2 ,       $M_Base_contact32             ) = { -sqrt(3/5)*$_TW/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact32             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact33             ) = 2                       ! Type
marker.ref (                        $M_Base_contact33             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact33             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact33             ) = { $_gauss23*$_TL/2 }    ! Position
marker.pos (              2 ,       $M_Base_contact33             ) = { sqrt(3/5)*$_TW/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact33             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact41             ) = 2                       ! Type
marker.ref (                        $M_Base_contact41             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact41             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact41             ) = { -$_gauss45*$_TL/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact41             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact42             ) = 2                       ! Type
marker.ref (                        $M_Base_contact42             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact42             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact42             ) = { -$_gauss45*$_TL/2 }   ! Position
marker.pos (              2 ,       $M_Base_contact42             ) = { -sqrt(3/5)*$_TW/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact42             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact43             ) = 2                       ! Type
marker.ref (                        $M_Base_contact43             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact43             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact43             ) = { -$_gauss45*$_TL/2 }   ! Position
marker.pos (              2 ,       $M_Base_contact43             ) = { sqrt(3/5)*$_TW/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact43             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact51             ) = 2                       ! Type
marker.ref (                        $M_Base_contact51             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact51             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact51             ) = { $_gauss45*$_TL/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact51             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact52             ) = 2                       ! Type
marker.ref (                        $M_Base_contact52             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact52             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact52             ) = { $_gauss45*$_TL/2 }    ! Position
marker.pos (              2 ,       $M_Base_contact52             ) = { -sqrt(3/5)*$_TW/2 }   ! Position
marker.pos (              3 ,       $M_Base_contact52             ) = { -$_r1 }               ! Position

marker.type (                       $M_Base_contact53             ) = 2                       ! Type
marker.ref (                        $M_Base_contact53             ) = $M_Base_BRF             ! Reference Marker
marker.parent (                     $M_Base_contact53             ) = $B_Base                 ! Body
marker.pos (              1 ,       $M_Base_contact53             ) = { $_gauss45*$_TL/2 }    ! Position
marker.pos (              2 ,       $M_Base_contact53             ) = { sqrt(3/5)*$_TW/2 }    ! Position
marker.pos (              3 ,       $M_Base_contact53             ) = { -$_r1 }               ! Position

joint.from (                        $J_Base                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_Base                       ) = $M_Base_BRF             ! To Marker
joint.type (                        $J_Base                       ) = 25                      ! Type
joint.st.pos (            1 ,       $J_Base                       ) = -1.00000000000000006E-01 ! Position
joint.st.pos (            2 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_Base                       ) = { 5*$_r1 }              ! Position
joint.st.vel (            1 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_Base                       ) = 7.50000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_Base                       ) = 0.00000000000000000E+00 ! Velocity
joint.par (               1 ,       $J_Base                       ) = 2.00000000000000000E+00 ! [-] Axis of rotation    1
joint.par (               2 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Axis of rotation    2
joint.par (               3 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Axis of rotation    3
joint.par (               4 ,       $J_Base                       ) = 1.00000000000000000E+00 ! [-] Axis of translation 1
joint.par (               5 ,       $J_Base                       ) = 3.00000000000000000E+00 ! [-] Axis of translation 2
joint.par (               6 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Axis of translation 3
joint.par (               8 ,       $J_Base                       ) = 0.00000000000000000E+00 ! [-] Trans-rot sequence
joint.attr.2d.pos.x (     1 ,       $J_Base                       ) = -20
joint.attr.2d.pos.y (     1 ,       $J_Base                       ) = 190
joint.attr.2d.ori (       1 ,       $J_Base                       ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 20, -42.5, -42.5, -20, -20, -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Base      ) = 0, 0, 143, 143, 153, 163, 173
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Base        ) = -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Base        ) = 280, 207

prim.type (                         $P_Base                       ) = 1                       ! Type
prim.ref (                          $P_Base                       ) = $M_Base_BRF             ! Reference Marker
prim.color.r (            1 ,       $P_Base                       ) = 3.00000000000000000E+01 ! Colors (red component)
prim.color.g (            1 ,       $P_Base                       ) = 1.44000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Base                       ) = 2.55000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Base                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_Base                       ) = 7.50000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_Base                       ) = 2.00000000000000000E+03 ! Density
prim.par (                2 ,       $P_Base                       ) = $_TL                    ! [m] Length in X
prim.par (                3 ,       $P_Base                       ) = $_TW                    ! [m] Length in Y
prim.par (                4 ,       $P_Base                       ) = $_d1                    ! [m] Length in Z

prim.type (                         $P_C1                         ) = 2                       ! Type
prim.ref (                          $P_C1                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                3 ,       $P_C1                         ) = { -$_r1 }               ! Position
prim.color.r (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C1                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C1                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C1                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C1                         ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C1                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C1                         ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_C1                         ) = { 2*$_rarb }            ! [m] Outer diameter
prim.par (                4 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_C1                         ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_C1                         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_C1                         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_C1                         ) = 0.00000000000000000E+00 ! [-] Close geometry with

prim.type (                         $P_C2                         ) = 2                       ! Type
prim.ref (                          $P_C2                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C2                         ) = { -$_gauss23*$_TL/2 }   ! Position
prim.pos (                3 ,       $P_C2                         ) = { -$_r1 }               ! Position
prim.color.r (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C2                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C2                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C2                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C2                         ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C2                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C2                         ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_C2                         ) = { 2*$_rarb }            ! [m] Outer diameter
prim.par (                4 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_C2                         ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_C2                         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_C2                         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_C2                         ) = 0.00000000000000000E+00 ! [-] Close geometry with

prim.type (                         $P_C3                         ) = 2                       ! Type
prim.ref (                          $P_C3                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C3                         ) = { $_gauss23*$_TL/2 }    ! Position
prim.pos (                3 ,       $P_C3                         ) = { -$_r1 }               ! Position
prim.color.r (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C3                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C3                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C3                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C3                         ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C3                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C3                         ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_C3                         ) = { 2*$_rarb }            ! [m] Outer diameter
prim.par (                4 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_C3                         ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_C3                         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_C3                         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_C3                         ) = 0.00000000000000000E+00 ! [-] Close geometry with

prim.type (                         $P_C4                         ) = 2                       ! Type
prim.ref (                          $P_C4                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C4                         ) = { -$_gauss45*$_TL/2 }   ! Position
prim.pos (                3 ,       $P_C4                         ) = { -$_r1 }               ! Position
prim.color.r (            1 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C4                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C4                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C4                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C4                         ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C4                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C4                         ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_C4                         ) = { 2*$_rarb }            ! [m] Outer diameter
prim.par (                4 ,       $P_C4                         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_C4                         ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_C4                         ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_C4                         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_C4                         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_C4                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_C4                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_C4                         ) = 0.00000000000000000E+00 ! [-] Close geometry with

prim.type (                         $P_C5                         ) = 2                       ! Type
prim.ref (                          $P_C5                         ) = $M_Base_BRF             ! Reference Marker
prim.pos (                1 ,       $P_C5                         ) = { $_gauss45*$_TL/2 }    ! Position
prim.pos (                3 ,       $P_C5                         ) = { -$_r1 }               ! Position
prim.color.r (            1 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_C5                         ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_C5                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_C5                         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_C5                         ) = 1.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_C5                         ) = 0.00000000000000000E+00 ! Density
prim.par (                2 ,       $P_C5                         ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_C5                         ) = { 2*$_rarb }            ! [m] Outer diameter
prim.par (                4 ,       $P_C5                         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_C5                         ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_C5                         ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_C5                         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_C5                         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_C5                         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_C5                         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_C5                         ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_Roda1                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda1                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda1                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda1                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda1                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda1                      ) = 3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda1                      ) = 1.40000000000000000E+02
body.attr.2d.width (                $B_Roda1                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda1                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda1_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda1_BRF                  ) = $B_Roda1                ! Body
marker.flx.type (                   $M_Roda1_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_Roda1_transmission         ) = -92                     ! Type
marker.parent (                     $M_Roda1_transmission         ) = $B_Roda1                ! Body
marker.par (              1 ,       $M_Roda1_transmission         ) = 2.00000000000000000E+00 ! [-] Rotation axis
marker.par (              2 ,       $M_Roda1_transmission         ) = $J_Roda1                ! [-] Connection/Joint
marker.par (              3 ,       $M_Roda1_transmission         ) = 1.00000000000000000E+00 ! [-] Connection/Joint state
marker.par (              4 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_x
marker.par (              5 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_y
marker.par (              6 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Built-in position r_z
marker.par (              8 ,       $M_Roda1_transmission         ) = { $_r1/$_r2 - 1 }       ! [-] Multiply by (1+<fact>)
marker.par (             10 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [m] Rotation circle radius
marker.par (             11 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [rad] Angle offset
marker.par (             13 ,       $M_Roda1_transmission         ) = 0.00000000000000000E+00 ! [-] Velocity & accel. calculation

joint.from (                        $J_Roda1                      ) = $M_Base_Roda1c          ! From Marker
joint.to (                          $J_Roda1                      ) = $M_Roda1_BRF            ! To Marker
joint.type (                        $J_Roda1                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda1                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda1                      ) = 30
joint.attr.2d.pos.y (     1 ,       $J_Roda1                      ) = 220
joint.attr.2d.ori (       1 ,       $J_Roda1                      ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 10, 10, 30, 30
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda1     ) = 280, 261.75, 261.75, 237
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 40, 40, 30, 30
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda1       ) = 180, 190, 190, 203

prim.type (                         $P_Roda1                      ) = 2                       ! Type
prim.ref (                          $P_Roda1                      ) = $M_Roda1_BRF            ! Reference Marker
prim.color.r (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_Roda1                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda1                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda1                      ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_Roda1                      ) = $_d1                    ! [m] Outer diameter
prim.par (                4 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_Roda1                      ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Roda1                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_Roda1                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_Roda1                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_Roda2                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda2                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda2                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda2                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda2                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda2                      ) = 3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda2                      ) = 5.10000000000000000E+02
body.attr.2d.width (                $B_Roda2                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda2                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda2_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda2_BRF                  ) = $B_Roda2                ! Body
marker.flx.type (                   $M_Roda2_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda2                      ) = $M_Base_Roda2c          ! From Marker
joint.to (                          $J_Roda2                      ) = $M_Roda2_BRF            ! To Marker
joint.type (                        $J_Roda2                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda2                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda2                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda2                      ) = 10
joint.attr.2d.pos.y (     1 ,       $J_Roda2                      ) = 360
joint.attr.2d.ori (       1 ,       $J_Roda2                      ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda2     ) = 10, 10
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda2     ) = 320, 343
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda2       ) = 30, 10, 10
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda2       ) = 520, 520, 377

prim.type (                         $P_Roda2                      ) = 2                       ! Type
prim.ref (                          $P_Roda2                      ) = $M_Roda2_BRF            ! Reference Marker
prim.color.r (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_Roda2                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda2                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda2                      ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_Roda2                      ) = $_d2                    ! [m] Outer diameter
prim.par (                4 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_Roda2                      ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Roda2                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_Roda2                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_Roda2                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_Roda3                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda3                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda3                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda3                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda3                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda3                      ) = -9.00000000000000000E+01
body.attr.2d.pos.y (                $B_Roda3                      ) = 5.10000000000000000E+02
body.attr.2d.width (                $B_Roda3                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda3                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda3_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda3_BRF                  ) = $B_Roda3                ! Body
marker.flx.type (                   $M_Roda3_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda3                      ) = $M_Base_Roda3c          ! From Marker
joint.to (                          $J_Roda3                      ) = $M_Roda3_BRF            ! To Marker
joint.type (                        $J_Roda3                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda3                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda3                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda3                      ) = -40
joint.attr.2d.pos.y (     1 ,       $J_Roda3                      ) = 390
joint.attr.2d.ori (       1 ,       $J_Roda3                      ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda3     ) = -30, -30, -40, -40
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda3     ) = 320, 340.75, 340.75, 373
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda3       ) = -50, -50, -40, -40, -40
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda3       ) = 510, 494.1875, 494.1875, 476.75, 407

prim.type (                         $P_Roda3                      ) = 2                       ! Type
prim.ref (                          $P_Roda3                      ) = $M_Roda3_BRF            ! Reference Marker
prim.color.r (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_Roda3                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda3                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda3                      ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_Roda3                      ) = $_d2                    ! [m] Outer diameter
prim.par (                4 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_Roda3                      ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Roda3                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_Roda3                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_Roda3                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_Roda4                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_Roda4                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Roda4                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Roda4                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_Roda4                      ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_Roda4                      ) = -1.30000000000000000E+02
body.attr.2d.pos.y (                $B_Roda4                      ) = 2.00000000000000000E+02
body.attr.2d.width (                $B_Roda4                      ) = 6.00000000000000000E+01
body.attr.2d.height (               $B_Roda4                      ) = 4.00000000000000000E+01

marker.type (                       $M_Roda4_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Roda4_BRF                  ) = $B_Roda4                ! Body
marker.flx.type (                   $M_Roda4_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Roda4                      ) = $M_Base_Roda4c          ! From Marker
joint.to (                          $J_Roda4                      ) = $M_Roda4_BRF            ! To Marker
joint.type (                        $J_Roda4                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_Roda4                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Roda4                      ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_Roda4                      ) = -80
joint.attr.2d.pos.y (     1 ,       $J_Roda4                      ) = 280
joint.attr.2d.ori (       1 ,       $J_Roda4                      ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Roda4     ) = -40, -50, -50, -63
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Roda4     ) = 290, 290, 280, 280
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Roda4       ) = -100, -100, -97
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Roda4       ) = 240, 280, 280

prim.type (                         $P_Roda4                      ) = 2                       ! Type
prim.ref (                          $P_Roda4                      ) = $M_Roda4_BRF            ! Reference Marker
prim.color.r (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_Roda4                      ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_Roda4                      ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Roda4                      ) = $_TW                    ! [m] Height
prim.par (                3 ,       $P_Roda4                      ) = $_d1                    ! [m] Outer diameter
prim.par (                4 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_Roda4                      ) = 2.40000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Roda4                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_Roda4                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_Roda4                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_connector                  ) = 1.00000000000000006E-09 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_connector                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_connector                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_connector                  ) = 0.00000000000000000E+00 ! Damping input value
body.attr.2d.pos.x (                $B_connector                  ) = 2.00000000000000000E+01
body.attr.2d.pos.y (                $B_connector                  ) = -2.00000000000000000E+01
body.attr.2d.width (                $B_connector                  ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_connector                  ) = 3.00000000000000000E+01

marker.type (                       $M_connector_BRF              ) = 1                       ! Type
marker.parent (                     $M_connector_BRF              ) = $B_connector            ! Body
marker.flx.type (                   $M_connector_BRF              ) = 4                       ! Flexible type

joint.from (                        $J_connector                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_connector                  ) = $M_connector_BRF        ! To Marker
joint.type (                        $J_connector                  ) = 0                       ! Type
joint.par (               1 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_connector                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_connector                  ) = -20
joint.attr.2d.pos.y (     1 ,       $J_connector                  ) = -20
joint.attr.2d.ori (       1 ,       $J_connector                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_connector ) = -20, -20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_connector ) = -60, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 50, 50, -20, -20, -20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_connector   ) = 10, 19.75, 19.75, 7, -3


body.m (                            $B_chao                       ) = 1.00000000000000004E-10 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_chao                       ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_chao                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.flx.dmp.all (                  $B_chao                       ) = 0.00000000000000000E+00 ! Damping input value

marker.type (                       $M_chao_BRF                   ) = 1                       ! Type
marker.parent (                     $M_chao_BRF                   ) = $B_chao                 ! Body
marker.flx.type (                   $M_chao_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_chao_contact1              ) = -96                     ! Type
marker.parent (                     $M_chao_contact1              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact1              ) = 2.06500285676662676E+00 ! Algebraic states
marker.par (              1 ,       $M_chao_contact1              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact1              ) = $M_Base_contact1        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact1              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact2              ) = -96                     ! Type
marker.parent (                     $M_chao_contact2              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact2              ) = 1.82200775331115805E+00 ! Algebraic states
marker.par (              1 ,       $M_chao_contact2              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact2              ) = $M_Base_contact2        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact2              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact3              ) = -96                     ! Type
marker.parent (                     $M_chao_contact3              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact3              ) = 2.30048530233570547E+00 ! Algebraic states
marker.par (              1 ,       $M_chao_contact3              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact3              ) = $M_Base_contact3        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact3              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact4              ) = -96                     ! Type
marker.parent (                     $M_chao_contact4              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact4              ) = 1.61582204984963029E+00 ! Algebraic states
marker.par (              1 ,       $M_chao_contact4              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact4              ) = $M_Base_contact4        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact4              ) = $P_chao                 ! [-] Contact geometry Primitive

marker.type (                       $M_chao_contact5              ) = -96                     ! Type
marker.parent (                     $M_chao_contact5              ) = $B_chao                 ! Body
marker.st.alg (           1 ,       $M_chao_contact5              ) = 2.46619472395981676E+00 ! Algebraic states
marker.par (              1 ,       $M_chao_contact5              ) = 1.00000000000000000E+00 ! [-] Marker type
marker.par (              2 ,       $M_chao_contact5              ) = $M_Base_contact5        ! [-] Parent Marker
marker.par (              3 ,       $M_chao_contact5              ) = $P_chao                 ! [-] Contact geometry Primitive

joint.from (                        $J_chao                       ) = $M_connector_BRF        ! From Marker
joint.to (                          $J_chao                       ) = $M_chao_BRF             ! To Marker
joint.type (                        $J_chao                       ) = 0                       ! Type
joint.par (               1 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_chao                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_chao                       ) = 5                       ! Type
prim.ref (                          $P_chao                       ) = $M_chao_BRF             ! Reference Marker
prim.ang (                1 ,       $P_chao                       ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   1 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   2 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   4 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   5 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   6 , $P_chao                       ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   7 , $P_chao                       ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   8 , $P_chao                       ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,   9 , $P_chao                       ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  10 , $P_chao                       ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  11 , $P_chao                       ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  12 , $P_chao                       ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  13 , $P_chao                       ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  14 , $P_chao                       ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  15 , $P_chao                       ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  16 , $P_chao                       ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  17 , $P_chao                       ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  18 , $P_chao                       ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  19 , $P_chao                       ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  20 , $P_chao                       ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  21 , $P_chao                       ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  22 , $P_chao                       ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  23 , $P_chao                       ) = 2.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  24 , $P_chao                       ) = 1.90000000000000000E+01 ! Vertices
prim.vtx (                1 ,  25 , $P_chao                       ) = 1.80000000000000000E+01 ! Vertices
prim.vtx (                1 ,  26 , $P_chao                       ) = 1.70000000000000000E+01 ! Vertices
prim.vtx (                1 ,  27 , $P_chao                       ) = 1.60000000000000000E+01 ! Vertices
prim.vtx (                1 ,  28 , $P_chao                       ) = 1.50000000000000000E+01 ! Vertices
prim.vtx (                1 ,  29 , $P_chao                       ) = 1.40000000000000000E+01 ! Vertices
prim.vtx (                1 ,  30 , $P_chao                       ) = 1.30000000000000000E+01 ! Vertices
prim.vtx (                1 ,  31 , $P_chao                       ) = 1.20000000000000000E+01 ! Vertices
prim.vtx (                1 ,  32 , $P_chao                       ) = 1.10000000000000000E+01 ! Vertices
prim.vtx (                1 ,  33 , $P_chao                       ) = 1.00000000000000000E+01 ! Vertices
prim.vtx (                1 ,  34 , $P_chao                       ) = 9.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  35 , $P_chao                       ) = 8.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  36 , $P_chao                       ) = 7.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  37 , $P_chao                       ) = 6.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  38 , $P_chao                       ) = 5.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  39 , $P_chao                       ) = 4.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  40 , $P_chao                       ) = 3.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  41 , $P_chao                       ) = 2.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  42 , $P_chao                       ) = 1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  43 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  44 , $P_chao                       ) = -1.00000000000000000E+00 ! Vertices
prim.vtx (                1 ,  45 , $P_chao                       ) = -2.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   1 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   2 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   3 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   4 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   5 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   6 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   7 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   8 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,   9 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  10 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  11 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  12 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  13 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  14 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  15 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  16 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  17 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  18 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  19 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  20 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  21 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  22 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  23 , $P_chao                       ) = 0.00000000000000000E+00 ! Vertices
prim.vtx (                2 ,  24 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  25 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  26 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  27 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  28 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  29 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  30 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  31 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  32 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  33 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  34 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  35 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  36 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  37 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  38 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  39 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  40 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  41 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  42 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  43 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  44 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.vtx (                2 ,  45 , $P_chao                       ) = -5.00000000000000000E-01 ! Vertices
prim.color.r (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_chao                       ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_chao                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Contour by
prim.par (                4 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Contour
prim.par (                6 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Curve fitting type
prim.par (                7 ,       $P_chao                       ) = 3.00000000000000000E+00 ! [-] Spline Degree
prim.par (                9 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Material side
prim.par (               10 ,       $P_chao                       ) = 4.00000000000000000E+00 ! [m] Depth
prim.par (               11 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Wall thickness
prim.par (               12 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (               13 ,       $P_chao                       ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (               14 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [m] Graphics discretization sag
prim.par (               15 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [rad] Graphics discretization angle
prim.par (               17 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Graphics start
prim.par (               18 ,       $P_chao                       ) = 0.00000000000000000E+00 ! [-] Graphics end


!**********************************************************************
! Constraints
!**********************************************************************
constr.from (                       $L_4                          ) = $M_Roda1_BRF            ! From Marker
constr.to (                         $L_4                          ) = $M_Roda4_BRF            ! To Marker
constr.type (                       $L_4                          ) = 25                      ! Type
constr.f (                1 ,       $L_4                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_4                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_4                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_4                          ) = -20
constr.attr.2d.pos.y (    1 ,       $L_4                          ) = 460
constr.attr.2d.ori (      1 ,       $L_4                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_4        ) = 50, 50, 40, 40, 40, -20, -20, -20
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_4        ) = 180, 237.1171875, 237.1171875, 256.15625, 332.3125, 332.3125, 379.75, 443
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_4          ) = -70, -45.9375, -45.9375, -3.75, 15, 40, 40, 40, 40, 40, 40, 20, 20, 20, 20, -20, -20
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_4          ) = 230, 230, 242.94670104980469, 242.94670104980469, 242.94670104980469, 242.94670104980469, 281.78680419921875, 299.049072265625, 322.0654296875, 352.75390625, 393.671875, 393.671875, 403.671875, 461.5625, 538.75, 538.75, 477

constr.from (                       $L_2                          ) = $M_Roda1_transmission   ! From Marker
constr.to (                         $L_2                          ) = $M_Roda2_BRF            ! To Marker
constr.type (                       $L_2                          ) = 25                      ! Type
constr.f (                1 ,       $L_2                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_2                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_2                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_2                          ) = 60
constr.attr.2d.pos.y (    1 ,       $L_2                          ) = 280
constr.attr.2d.ori (      1 ,       $L_2                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_2        ) = 60, 60
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_2        ) = 180, 263
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_2          ) = 70, 70, 60, 60, 60, 60
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_2          ) = 510, 400.1875, 400.1875, 390.1875, 350.25, 297

constr.from (                       $L_3                          ) = $M_Roda1_transmission   ! From Marker
constr.to (                         $L_3                          ) = $M_Roda3_BRF            ! To Marker
constr.type (                       $L_3                          ) = 25                      ! Type
constr.f (                1 ,       $L_3                          ) = 0.00000000000000000E+00 ! Forces
constr.par (              1 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_3                          ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k
constr.par (              7 ,       $L_3                          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.attr.2d.pos.x (    1 ,       $L_3                          ) = 50
constr.attr.2d.pos.y (    1 ,       $L_3                          ) = 420
constr.attr.2d.ori (      1 ,       $L_3                          ) = 90
constr.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $L_3        ) = 80, 80, 70, 60, 50, 50, 50
constr.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $L_3        ) = 180, 305.4375, 305.4375, 305.4375, 305.4375, 347.25, 403
constr.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $L_3          ) = -40, -40, 50, 50
constr.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $L_3          ) = 510, 484.25, 484.25, 437

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_1                          ) = 50                      ! Type
force.from (                        $F_1                          ) = $M_connector_BRF        ! From Marker
force.to (                          $F_1                          ) = $M_Roda1_BRF            ! To Marker
force.disabled (                    $F_1                          ) = 0                       ! Disabled
force.par (               1 ,       $F_1                          ) = $M_connector_BRF        ! [-] Reference Marker for calc.
force.par (               3 ,       $F_1                          ) = null                    ! [-] Expression for Fx
force.par (               4 ,       $F_1                          ) = null                    ! [-] Expression for Fy
force.par (               5 ,       $F_1                          ) = null                    ! [-] Expression for Fz
force.par (               6 ,       $F_1                          ) = null                    ! [-] Expression for Lx
force.par (               7 ,       $F_1                          ) = $X_My_roda1             ! [-] Expression for Ly
force.par (               8 ,       $F_1                          ) = null                    ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_1                          ) = 10
force.attr.2d.pos.y (     1 ,       $F_1                          ) = 50
force.attr.2d.ori (       1 ,       $F_1                          ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_1         ) = 40, 40, 10, 10
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_1         ) = 10, 20, 20, 33
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_1           ) = 30, 10, 10
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_1           ) = 150, 150, 67

force.type (                        $F_base                       ) = 50                      ! Type
force.from (                        $F_base                       ) = $M_chao_contact1        ! From Marker
force.to (                          $F_base                       ) = $M_Base_BRF             ! To Marker
force.par (               1 ,       $F_base                       ) = $M_Base_BRF             ! [-] Reference Marker for calc.
force.par (               3 ,       $F_base                       ) = $X_Fx                   ! [-] Expression for Fx
force.par (               4 ,       $F_base                       ) = null                    ! [-] Expression for Fy
force.par (               5 ,       $F_base                       ) = $X_Fn                   ! [-] Expression for Fz
force.par (               6 ,       $F_base                       ) = null                    ! [-] Expression for Lx
force.par (               7 ,       $F_base                       ) = $X_My_base              ! [-] Expression for Ly
force.par (               8 ,       $F_base                       ) = null                    ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_base                       ) = -20
force.attr.2d.pos.y (     1 ,       $F_base                       ) = 120
force.attr.2d.ori (       1 ,       $F_base                       ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_base      ) = 30, 30, -20, -20, -20
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_base      ) = 10, 25.1875, 25.1875, 40.75, 103
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_base        ) = 0, 0, -10, -20, -20
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_base        ) = 280, 172.75, 172.75, 172.75, 137

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_Torquecte                  ) = '-10'                   ! Definition

express.str (                       $X_Bn                         ) = '($_CI*$_TL*$_TW/($X_Fz2*(1-exp(-$_CI/(0.698*10^6)))))*5/(1+6*($_TW/$_TL))' ! Definition

express.str (                       $X_Fn                         ) = '-($_A/2)*($_ksolo*($_gaussW1*$X_delta1+$_gaussW23*$X_delta2+$_gaussW23*$X_delta3+$_gaussW45*$X_delta4+$_gaussW45*$X_delta5)+$_c_solo*($_gaussW1*$dX_delta1+$_gaussW23*$dX_delta2+$_gaussW23*$dX_delta3+$_gaussW45*$dX_delta4+$_gaussW45*$dX_delta5))' ! Definition
express.txt (                       $X_Fn                         ) = '-($_ksolo*$X_delta1 + $_c_solo*$dX_delta1)*$_A*cos(beta($M_Base_BRF))' ! Comment

express.str (                       $X_delta1                     ) = 'IF($X_dist_borda1 < 0)\n{\n-$X_dist_borda1\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta2                     ) = 'IF($X_dist_borda2 < 0)\n{\n-$X_dist_borda2\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta3                     ) = 'IF($X_dist_borda3 < 0)\n{\n-$X_dist_borda3\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta4                     ) = 'IF($X_dist_borda4 < 0)\n{\n-$X_dist_borda4\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_delta5                     ) = 'IF($X_dist_borda5 < 0)\n{\n-$X_dist_borda5\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta1                    ) = 'IF($X_dist_borda1 < 0)\n{\n-$dX_dist_borda1\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta2                    ) = 'IF($X_dist_borda2 < 0)\n{\n-$dX_dist_borda2\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta3                    ) = 'IF($X_dist_borda3 < 0)\n{\n-$dX_dist_borda3\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta4                    ) = 'IF($X_dist_borda4 < 0)\n{\n-$dX_dist_borda4\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $dX_delta5                    ) = 'IF($X_dist_borda5 < 0)\n{\n-$dX_dist_borda5\n}\nELSE\n{\n0\n}' ! Definition

express.str (                       $X_dist_borda1                ) = 'DY($M_Base_contact11,$M_chao_contact1,$M_chao_contact1)' ! Definition
express.txt (                       $X_dist_borda1                ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda2                ) = 'DY($M_Base_contact21,$M_chao_contact2,$M_chao_contact2)' ! Definition
express.txt (                       $X_dist_borda2                ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda3                ) = 'DY($M_Base_contact31,$M_chao_contact3,$M_chao_contact3)' ! Definition
express.txt (                       $X_dist_borda3                ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda4                ) = 'DY($M_Base_contact41,$M_chao_contact4,$M_chao_contact4)' ! Definition
express.txt (                       $X_dist_borda4                ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $X_dist_borda5                ) = 'DY($M_Base_contact51,$M_chao_contact5,$M_chao_contact5)' ! Definition
express.txt (                       $X_dist_borda5                ) = 'DZ($M_Base_BRF)-$_r1'  ! Comment

express.str (                       $dX_dist_borda1               ) = 'VY($M_Base_contact11,$M_chao_contact1,$M_chao_contact1)' ! Definition
express.txt (                       $dX_dist_borda1               ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda2               ) = 'VY($M_Base_contact21,$M_chao_contact2,$M_chao_contact2)' ! Definition
express.txt (                       $dX_dist_borda2               ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda3               ) = 'VY($M_Base_contact31,$M_chao_contact3,$M_chao_contact3)' ! Definition
express.txt (                       $dX_dist_borda3               ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda4               ) = 'VY($M_Base_contact41,$M_chao_contact4,$M_chao_contact4)' ! Definition
express.txt (                       $dX_dist_borda4               ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $dX_dist_borda5               ) = 'VY($M_Base_contact51,$M_chao_contact5,$M_chao_contact5)' ! Definition
express.txt (                       $dX_dist_borda5               ) = 'VZ($M_Base_BRF)'       ! Comment

express.str (                       $X_My_base                    ) = 'tanh(1000*($_gaussW1*$X_delta1+$_gauss23*($X_delta2+$X_delta3+$_gauss45*($X_delta4+$X_delta5))))*($_A/2)*($_ksolo*(-$_gauss23*$_gaussW23*$X_delta2+$_gauss23*$_gaussW23*$X_delta3-$_gauss45*$_gaussW45*$X_delta4+$_gauss45*$_gaussW45*$X_delta5)+$_c_solo*(-$_gauss23*$_gaussW23*$dX_delta2+$_gauss23*$_gaussW23*$dX_delta3-$_gauss45*$_gaussW45*$dX_delta4+$_gauss45*$_gaussW45*$dX_delta5))' ! Definition
express.txt (                       $X_My_base                    ) = 'tanh(10*$X_delta1)*($_ksolo*sin(beta($M_Base_BRF)) + $_c_solo*WY($M_Base_BRF)*cos(beta($M_Base_BRF)))*($_A/12)*(cos(beta($M_Base_BRF))*$_TL)^2' ! Comment

express.str (                       $X_vrel                       ) = 'VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF) - $_r1*WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)' ! Definition

express.str (                       $X_s                          ) = 'IF(abs(VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF)) - ($_r1)*abs(WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF))>0)\n{\n-$X_vrel/abs(VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF))\n}\nELSE\n{\n-$X_vrel/(($_r1)*abs(WY($M_Roda1_BRF,$M_Base_BRF,$M_Base_BRF)))\n}' ! Definition

express.str (                       $X_Fz2                        ) = 'IF(abs($X_Fn) > 0.1)\n{\nabs($X_Fn)\n}\nELSE\n{\n0.1\n}' ! Definition

express.str (                       $X_GT                         ) = '$X_Fn*(1.10*(1-exp(-0.025*$X_Bn))*(1-exp(-17*abs($X_s)))+0.03/$X_DWI)*tanh(-100*$X_vrel)' ! Definition

express.str (                       $X_DWR                        ) = '1+($X_My_base/$X_Fz2)/$_TL' ! Definition

express.str (                       $X_DWI                        ) = '1-abs(0.7*($X_DWR-1)/($X_DWR+1))' ! Definition

express.str (                       $X_MR                         ) = '$X_Fn*(2.5/($X_Bn*$X_DWI)+0.03/$X_DWI + 0.5*abs($X_s)/sqrt($X_Bn))*tanh(100*VX($M_Base_BRF,$M_connector_BRF,$M_Base_BRF))' ! Definition

express.str (                       $X_NT                         ) = '$X_GT - $X_MR'         ! Definition

express.str (                       $X_My_roda1                   ) = '-$_r1*$X_GT'           ! Definition

express.str (                       $X_Fx                         ) = '$X_NT'                 ! Definition
express.txt (                       $X_Fx                         ) = '$X_GT*cos(beta($M_Base_BRF)) - $X_MR' ! Comment

express.str (                       $X_Fz                         ) = '$X_Fn'                 ! Definition
express.txt (                       $X_Fz                         ) = ' - $X_GT*sin(beta($M_Base_BRF))' ! Comment

model.data.redundancy                                               = 'eJxjYBhcINnc3NTIwiLV0NLU3DjVPNk0ydLI1CApzdjAwMzQKNUIAIXlCAiwAAAAAAAAAA==' ! Constraint redundancy data
model.data.dependency                                               = 'eJxjZiAOMOLBDDjY6GpAINnc3NTIwiLV0NLU3DjVPNk0ydLI1CApzdjAwMzQKNUIAIuJCBmQAAAAAAAAAA==' ! Solver state dependency data
